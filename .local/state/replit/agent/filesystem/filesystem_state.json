{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a multi-tenant SaaS chatbot platform that enables businesses to create, deploy, and manage AI-powered chatbots for their websites. The system supports lead capture, appointment scheduling, customer support, and intelligent conversations through AI integration. It features role-based access control with superadmin oversight and individual business tenant management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for client-side routing\n- **Styling**: Dark theme design with CSS custom properties for theming\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Real-time Communication**: WebSocket server for live updates and notifications\n- **Session Management**: PostgreSQL-backed session storage using connect-pg-simple\n\n## Authentication & Authorization\n- **Provider**: Traditional username/password authentication with bcrypt hashing\n- **Session Storage**: Memory-based sessions with secure HTTP-only cookies (eliminates database conflicts)\n- **Role-based Access**: Three-tier system (superadmin, business_admin, business_member)\n- **Multi-tenant Security**: Tenant isolation at the database and API level\n- **Simple Auth Interface**: Clean signup/signin buttons at /auth page with form validation\n- **Username-based Login**: Users register and login with username instead of email\n\n## Database Design\n- **Multi-tenant Architecture**: Tenant-scoped data isolation with foreign key relationships\n- **Core Entities**: Users, Tenants, Chatbots, Leads, Appointments, Services, Knowledge Base\n- **Analytics**: Conversation tracking and performance metrics storage\n- **Content Management**: Website scraping results and knowledge base entries\n\n## AI Integration\n- **Provider**: OpenAI GPT-4o for natural language processing\n- **Training Pipeline**: Website content scraping and knowledge base generation\n- **Context Management**: Dynamic context injection from website content and knowledge base\n- **Response Generation**: Contextual chatbot responses with lead extraction capabilities\n\n## Real-time Features\n- **WebSocket Manager**: Client-side WebSocket connection handling with reconnection logic\n- **Live Updates**: Real-time notifications for new leads, appointments, and conversations\n- **Tenant Broadcasting**: Scoped real-time updates within tenant boundaries\n\n## Content Management\n- **Web Scraping**: Puppeteer-based website content extraction\n- **Knowledge Base**: Structured Q&A management with AI-assisted training\n- **Content Processing**: Automatic content analysis and chatbot training data generation\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle Kit**: Database migrations and schema management\n- **Connect PG Simple**: PostgreSQL session store adapter\n\n## AI & ML Services\n- **OpenAI API**: GPT-4o model for natural language processing and response generation\n- **Puppeteer**: Headless Chrome automation for website content scraping\n\n## Authentication\n- **Replit OIDC**: OpenID Connect provider for user authentication\n- **Passport.js**: Authentication middleware with OpenID Connect strategy\n\n## Development Tools\n- **Vite**: Frontend build tool with React plugin\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Backend bundling for production builds\n- **Replit Dev Tools**: Runtime error overlay and cartographer for development","size_bytes":3827},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n        dark: \"var(--dark)\",\n        surface: \"var(--surface)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in\": {\n          from: {\n            transform: \"translateX(-100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3414},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Please add your Supabase connection string.\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false }\n});\nexport const db = drizzle(pool, { schema });","size_bytes":423},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { aiService } from \"./services/aiService\";\nimport { chatbotService } from \"./services/chatbotService\";\nimport { scrapingService } from \"./services/scrapingService\";\nimport { insertTenantSchema, insertChatbotSchema, insertLeadSchema, insertAppointmentSchema, insertServiceSchema, insertKnowledgeBaseSchema } from \"@shared/schema\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: any;\n}\n\n// Middleware to check if user is superadmin\nconst isSuperAdmin = async (req: AuthenticatedRequest, res: Response, next: Function) => {\n  try {\n    const user = req.user;\n    if (!user || user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Forbidden: Superadmin access required\" });\n    }\n\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Failed to verify admin status\" });\n  }\n};\n\n// Middleware to get tenant context for business admins\nconst getTenantContext = async (req: AuthenticatedRequest, res: Response, next: Function) => {\n  try {\n    const user = req.user;\n    if (!user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    if (user.role === 'superadmin') {\n      // Superadmins can access any tenant via query parameter\n      req.tenantId = (req.query.tenantId as string) || undefined;\n    } else {\n      // Business users can only access their own tenant\n      req.tenantId = user.tenantId;\n    }\n\n    if (!req.tenantId && user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"No tenant access\" });\n    }\n\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Failed to get tenant context\" });\n  }\n};\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      tenantId?: string;\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware  \n  setupAuth(app);\n\n  // Auth routes are handled in setupAuth function\n\n  // === SETUP & USER MANAGEMENT ===\n  \n  // Promote user to superadmin (for initial setup)\n  app.post(\"/api/setup/promote-superadmin\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Check if any superadmins exist (for security)\n      const allUsers = await storage.getAllUsers();\n      const existingSuperadmins = allUsers.filter(user => user.role === 'superadmin');\n      \n      if (existingSuperadmins.length === 0) {\n        // First user becomes superadmin\n        const user = await storage.promoteToSuperadmin(userId);\n        res.json({ message: \"Successfully promoted to superadmin\", user });\n      } else {\n        res.status(403).json({ message: \"Superadmin already exists\" });\n      }\n    } catch (error) {\n      console.error(\"Error promoting to superadmin:\", error);\n      res.status(500).json({ message: \"Failed to promote user\" });\n    }\n  });\n\n  // Check setup status\n  app.get(\"/api/setup/status\", async (req, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      const hasSuperadmin = allUsers.some(user => user.role === 'superadmin');\n      res.json({ hasSuperadmin, totalUsers: allUsers.length });\n    } catch (error) {\n      console.error(\"Error checking setup status:\", error);\n      res.status(500).json({ message: \"Failed to check setup status\" });\n    }\n  });\n\n  // === SUPERADMIN ROUTES ===\n  \n  // Get all users (superadmin only)\n  app.get(\"/api/superadmin/users\", isAuthenticated, isSuperAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n  \n  // Get all tenants (superadmin only)\n  app.get(\"/api/superadmin/tenants\", isAuthenticated, isSuperAdmin, async (req, res) => {\n    try {\n      const tenants = await storage.getTenants();\n      res.json(tenants);\n    } catch (error) {\n      console.error(\"Error fetching tenants:\", error);\n      res.status(500).json({ message: \"Failed to fetch tenants\" });\n    }\n  });\n\n  // Create new tenant with admin user (superadmin only)\n  app.post(\"/api/superadmin/tenants\", isAuthenticated, isSuperAdmin, async (req, res) => {\n    try {\n      console.log(\"Creating tenant with data:\", req.body);\n      const { adminEmail, adminFirstName, adminLastName, ...tenantData } = req.body;\n      \n      // Validate tenant data\n      const parsedTenantData = insertTenantSchema.parse(tenantData);\n      console.log(\"Parsed tenant data:\", parsedTenantData);\n      \n      // Create tenant and admin user in a transaction-like approach\n      const tenant = await storage.createTenant(parsedTenantData);\n      console.log(\"Created tenant:\", tenant);\n      \n      if (adminEmail && adminFirstName && adminLastName && req.body.adminPassword) {\n        // Create admin user for the tenant\n        const adminUser = await storage.createTenantAdmin({\n          username: `admin_${tenant.id.slice(0, 8)}`,\n          email: adminEmail,\n          firstName: adminFirstName,\n          lastName: adminLastName,\n          password: req.body.adminPassword,\n          role: 'business_admin' as const,\n          tenantId: tenant.id\n        });\n        console.log(\"Created admin user:\", adminUser);\n        \n        res.json({ \n          tenant, \n          adminUser,\n          message: \"Tenant and admin user created successfully. Admin can now log in with their credentials.\" \n        });\n      } else {\n        res.json({ \n          tenant,\n          message: \"Tenant created successfully. No admin user was created.\" \n        });\n      }\n    } catch (error) {\n      console.error(\"Error creating tenant:\", error);\n      if (error instanceof Error) {\n        res.status(500).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create tenant\" });\n      }\n    }\n  });\n\n  // Update tenant (superadmin only)\n  app.patch(\"/api/superadmin/tenants/:id\", isAuthenticated, isSuperAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const tenant = await storage.updateTenant(id, updates);\n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Error updating tenant:\", error);\n      res.status(500).json({ message: \"Failed to update tenant\" });\n    }\n  });\n\n  // Get platform-wide statistics (superadmin only)\n  app.get(\"/api/superadmin/stats\", isAuthenticated, isSuperAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getAllTenantsStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching platform stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch platform statistics\" });\n    }\n  });\n\n  // === TENANT CREATION FOR BUSINESS USERS ===\n  \n  // Create tenant for authenticated user (business members can create their own tenant)\n  app.post(\"/api/tenants\", isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Check if user already has a tenant\n      if (user.tenantId) {\n        return res.status(400).json({ message: \"User already belongs to a tenant\" });\n      }\n      \n      const tenantData = insertTenantSchema.parse(req.body);\n      \n      // Create the tenant\n      const tenant = await storage.createTenant(tenantData);\n      \n      // Promote user to business_admin and assign to tenant\n      await storage.upsertUser({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        password: user.password,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: 'business_admin',\n        tenantId: tenant.id,\n      });\n      \n      res.json(tenant);\n    } catch (error) {\n      console.error(\"Error creating tenant:\", error);\n      res.status(500).json({ message: \"Failed to create tenant\" });\n    }\n  });\n\n  // === TENANT-SCOPED ROUTES ===\n  \n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const stats = await storage.getTenantStats(tenantId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // === CHATBOT ROUTES ===\n  \n  // Get chatbots\n  app.get(\"/api/chatbots\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const chatbots = await storage.getChatbotsByTenant(tenantId);\n      res.json(chatbots);\n    } catch (error) {\n      console.error(\"Error fetching chatbots:\", error);\n      res.status(500).json({ message: \"Failed to fetch chatbots\" });\n    }\n  });\n\n  // Create chatbot\n  app.post(\"/api/chatbots\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const chatbotData = insertChatbotSchema.parse({ ...req.body, tenantId });\n      const chatbot = await storage.createChatbot(chatbotData);\n      res.json(chatbot);\n    } catch (error) {\n      console.error(\"Error creating chatbot:\", error);\n      res.status(500).json({ message: \"Failed to create chatbot\" });\n    }\n  });\n\n  // Update chatbot\n  app.patch(\"/api/chatbots/:id\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      const updates = req.body;\n      const chatbot = await storage.updateChatbot(id, updates, tenantId);\n      res.json(chatbot);\n    } catch (error) {\n      console.error(\"Error updating chatbot:\", error);\n      res.status(500).json({ message: \"Failed to update chatbot\" });\n    }\n  });\n\n  // Delete chatbot\n  app.delete(\"/api/chatbots/:id\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      await storage.deleteChatbot(id, tenantId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting chatbot:\", error);\n      res.status(500).json({ message: \"Failed to delete chatbot\" });\n    }\n  });\n\n  // === LEADS ROUTES ===\n  \n  // Get leads\n  app.get(\"/api/leads\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const leads = await storage.getLeadsByTenant(tenantId);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  // Create lead\n  app.post(\"/api/leads\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const leadData = insertLeadSchema.parse({ ...req.body, tenantId });\n      const lead = await storage.createLead(leadData);\n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  // Update lead\n  app.patch(\"/api/leads/:id\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      const updates = req.body;\n      const lead = await storage.updateLead(id, updates, tenantId);\n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error updating lead:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  // === APPOINTMENTS ROUTES ===\n  \n  // Get appointments\n  app.get(\"/api/appointments\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const appointments = await storage.getAppointmentsByTenant(tenantId);\n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching appointments:\", error);\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  // Create appointment\n  app.post(\"/api/appointments\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const appointmentData = insertAppointmentSchema.parse({ ...req.body, tenantId });\n      const appointment = await storage.createAppointment(appointmentData);\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      res.status(500).json({ message: \"Failed to create appointment\" });\n    }\n  });\n\n  // Update appointment\n  app.patch(\"/api/appointments/:id\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      const updates = req.body;\n      const appointment = await storage.updateAppointment(id, updates, tenantId);\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error updating appointment:\", error);\n      res.status(500).json({ message: \"Failed to update appointment\" });\n    }\n  });\n\n  // === SERVICES ROUTES ===\n  \n  // Get services\n  app.get(\"/api/services\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const services = await storage.getServicesByTenant(tenantId);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Create service\n  app.post(\"/api/services\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const serviceData = insertServiceSchema.parse({ ...req.body, tenantId });\n      const service = await storage.createService(serviceData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  // === KNOWLEDGE BASE ROUTES ===\n  \n  // Get knowledge base\n  app.get(\"/api/knowledge-base\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const knowledgeBase = await storage.getKnowledgeBaseByTenant(tenantId);\n      res.json(knowledgeBase);\n    } catch (error) {\n      console.error(\"Error fetching knowledge base:\", error);\n      res.status(500).json({ message: \"Failed to fetch knowledge base\" });\n    }\n  });\n\n  // Create knowledge base item\n  app.post(\"/api/knowledge-base\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const itemData = insertKnowledgeBaseSchema.parse({ ...req.body, tenantId });\n      const item = await storage.createKnowledgeBaseItem(itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating knowledge base item:\", error);\n      res.status(500).json({ message: \"Failed to create knowledge base item\" });\n    }\n  });\n\n  // === AI TRAINING ROUTES ===\n  \n  // Scrape website content\n  app.post(\"/api/ai/scrape-website\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { url } = req.body;\n      \n      if (!url) {\n        return res.status(400).json({ message: \"URL is required\" });\n      }\n\n      const content = await scrapingService.scrapeWebsite(url);\n      const websiteContent = await storage.createWebsiteContent({\n        tenantId,\n        url,\n        title: content.title,\n        content: content.content,\n      });\n\n      res.json(websiteContent);\n    } catch (error) {\n      console.error(\"Error scraping website:\", error);\n      res.status(500).json({ message: \"Failed to scrape website\" });\n    }\n  });\n\n  // Train AI with content\n  app.post(\"/api/ai/train\", isAuthenticated, getTenantContext, async (req, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { contentIds, chatbotId } = req.body;\n      \n      const result = await aiService.trainChatbot(tenantId, chatbotId, contentIds);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error training AI:\", error);\n      res.status(500).json({ message: \"Failed to train AI\" });\n    }\n  });\n\n  // === PUBLIC CHATBOT API ===\n  \n  // Public chatbot interaction (no auth required)\n  app.post(\"/api/public/chat/:chatbotId\", async (req, res) => {\n    try {\n      const { chatbotId } = req.params;\n      const { message, sessionId } = req.body;\n      \n      const response = await chatbotService.processMessage(chatbotId, message, sessionId);\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process message\" });\n    }\n  });\n\n  // Get chatbot widget configuration (no auth required)\n  app.get(\"/api/public/chatbot/:chatbotId/config\", async (req, res) => {\n    try {\n      const { chatbotId } = req.params;\n      const chatbot = await storage.getChatbot(chatbotId);\n      \n      if (!chatbot || !chatbot.isActive) {\n        return res.status(404).json({ message: \"Chatbot not found or inactive\" });\n      }\n\n      // Return only public configuration\n      const config = {\n        id: chatbot.id,\n        name: chatbot.name,\n        welcomeMessage: chatbot.welcomeMessage,\n        theme: chatbot.theme,\n      };\n\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error fetching chatbot config:\", error);\n      res.status(500).json({ message: \"Failed to fetch chatbot configuration\" });\n    }\n  });\n\n  // === WEBSOCKET SETUP ===\n  \n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('WebSocket connection established');\n    \n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        // Handle different message types\n        switch (message.type) {\n          case 'subscribe_tenant':\n            // Join tenant-specific room for real-time updates\n            ws.tenantId = message.tenantId;\n            ws.send(JSON.stringify({ type: 'subscribed', tenantId: message.tenantId }));\n            break;\n            \n          case 'ping':\n            ws.send(JSON.stringify({ type: 'pong' }));\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  // Broadcast real-time updates to connected clients\n  const broadcastToTenant = (tenantId: string, data: any) => {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN && (client as any).tenantId === tenantId) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Store broadcast function for use in services\n  app.set('broadcastToTenant', broadcastToTenant);\n\n  return httpServer;\n}\n","size_bytes":19322},"server/storage.ts":{"content":"import {\n  users,\n  tenants,\n  chatbots,\n  leads,\n  appointments,\n  services,\n  knowledgeBase,\n  websiteContent,\n  conversations,\n  analytics,\n  type User,\n  type UpsertUser,\n  type Tenant,\n  type InsertTenant,\n  type Chatbot,\n  type InsertChatbot,\n  type Lead,\n  type InsertLead,\n  type Appointment,\n  type InsertAppointment,\n  type Service,\n  type InsertService,\n  type KnowledgeBase,\n  type InsertKnowledgeBase,\n  type WebsiteContent,\n  type InsertWebsiteContent,\n  type Conversation,\n  type InsertConversation,\n  type Analytics,\n  type InsertAnalytics,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, count, avg, sum } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  promoteToSuperadmin(userId: string): Promise<User>;\n  createTenantAdmin(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Tenant operations\n  getTenant(id: string): Promise<Tenant | undefined>;\n  getTenantByDomain(domain: string): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n  updateTenant(id: string, tenant: Partial<InsertTenant>): Promise<Tenant>;\n  getTenants(): Promise<Tenant[]>;\n  \n  // Chatbot operations\n  getChatbot(id: string, tenantId?: string): Promise<Chatbot | undefined>;\n  getChatbotsByTenant(tenantId: string): Promise<Chatbot[]>;\n  createChatbot(chatbot: InsertChatbot): Promise<Chatbot>;\n  updateChatbot(id: string, chatbot: Partial<InsertChatbot>, tenantId?: string): Promise<Chatbot>;\n  deleteChatbot(id: string, tenantId?: string): Promise<void>;\n  \n  // Lead operations\n  getLead(id: string, tenantId?: string): Promise<Lead | undefined>;\n  getLeadsByTenant(tenantId: string): Promise<Lead[]>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, lead: Partial<InsertLead>, tenantId?: string): Promise<Lead>;\n  deleteLead(id: string, tenantId?: string): Promise<void>;\n  \n  // Appointment operations\n  getAppointment(id: string, tenantId?: string): Promise<Appointment | undefined>;\n  getAppointmentsByTenant(tenantId: string): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>, tenantId?: string): Promise<Appointment>;\n  deleteAppointment(id: string, tenantId?: string): Promise<void>;\n  \n  // Service operations\n  getService(id: string, tenantId?: string): Promise<Service | undefined>;\n  getServicesByTenant(tenantId: string): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>, tenantId?: string): Promise<Service>;\n  deleteService(id: string, tenantId?: string): Promise<void>;\n  \n  // Knowledge Base operations\n  getKnowledgeBaseItem(id: string, tenantId?: string): Promise<KnowledgeBase | undefined>;\n  getKnowledgeBaseByTenant(tenantId: string): Promise<KnowledgeBase[]>;\n  createKnowledgeBaseItem(item: InsertKnowledgeBase): Promise<KnowledgeBase>;\n  updateKnowledgeBaseItem(id: string, item: Partial<InsertKnowledgeBase>, tenantId?: string): Promise<KnowledgeBase>;\n  deleteKnowledgeBaseItem(id: string, tenantId?: string): Promise<void>;\n  \n  // Website Content operations\n  getWebsiteContent(id: string, tenantId?: string): Promise<WebsiteContent | undefined>;\n  getWebsiteContentByTenant(tenantId: string): Promise<WebsiteContent[]>;\n  createWebsiteContent(content: InsertWebsiteContent): Promise<WebsiteContent>;\n  updateWebsiteContent(id: string, content: Partial<InsertWebsiteContent>, tenantId?: string): Promise<WebsiteContent>;\n  deleteWebsiteContent(id: string, tenantId?: string): Promise<void>;\n  \n  // Conversation operations\n  getConversation(id: string, tenantId?: string): Promise<Conversation | undefined>;\n  getConversationsByTenant(tenantId: string): Promise<Conversation[]>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, conversation: Partial<InsertConversation>, tenantId?: string): Promise<Conversation>;\n  \n  // Analytics operations\n  getAnalyticsByTenant(tenantId: string, startDate?: Date, endDate?: Date): Promise<Analytics[]>;\n  createAnalytics(analytics: InsertAnalytics): Promise<Analytics>;\n  \n  // Dashboard aggregations\n  getTenantStats(tenantId: string): Promise<{\n    totalConversations: number;\n    newLeads: number;\n    appointmentsScheduled: number;\n    averageSatisfaction: number;\n  }>;\n  \n  // Superadmin operations\n  getAllTenantsStats(): Promise<{\n    totalTenants: number;\n    activeTenants: number;\n    totalConversations: number;\n    totalLeads: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async promoteToSuperadmin(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role: 'superadmin', tenantId: null, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async createTenantAdmin(userData: UpsertUser & { password: string }): Promise<User> {\n    const { scrypt, randomBytes } = await import(\"crypto\");\n    const { promisify } = await import(\"util\");\n    const scryptAsync = promisify(scrypt);\n    \n    // Hash password\n    const salt = randomBytes(16).toString(\"hex\");\n    const buf = (await scryptAsync(userData.password, salt, 64)) as Buffer;\n    const hashedPassword = `${buf.toString(\"hex\")}.${salt}`;\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Tenant operations\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, id));\n    return tenant;\n  }\n\n  async getTenantByDomain(domain: string): Promise<Tenant | undefined> {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.domain, domain));\n    return tenant;\n  }\n\n  async createTenant(tenant: InsertTenant): Promise<Tenant> {\n    const [newTenant] = await db.insert(tenants).values(tenant).returning();\n    return newTenant;\n  }\n\n  async updateTenant(id: string, tenant: Partial<InsertTenant>): Promise<Tenant> {\n    const [updatedTenant] = await db\n      .update(tenants)\n      .set({ ...tenant, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    return updatedTenant;\n  }\n\n  async getTenants(): Promise<Tenant[]> {\n    return await db.select().from(tenants).orderBy(desc(tenants.createdAt));\n  }\n\n  // Chatbot operations\n  async getChatbot(id: string, tenantId?: string): Promise<Chatbot | undefined> {\n    const conditions = tenantId ? and(eq(chatbots.id, id), eq(chatbots.tenantId, tenantId)) : eq(chatbots.id, id);\n    const [chatbot] = await db.select().from(chatbots).where(conditions);\n    return chatbot;\n  }\n\n  async getChatbotsByTenant(tenantId: string): Promise<Chatbot[]> {\n    return await db.select().from(chatbots).where(eq(chatbots.tenantId, tenantId)).orderBy(desc(chatbots.createdAt));\n  }\n\n  async createChatbot(chatbot: InsertChatbot): Promise<Chatbot> {\n    const [newChatbot] = await db.insert(chatbots).values(chatbot).returning();\n    return newChatbot;\n  }\n\n  async updateChatbot(id: string, chatbot: Partial<InsertChatbot>, tenantId?: string): Promise<Chatbot> {\n    const conditions = tenantId ? and(eq(chatbots.id, id), eq(chatbots.tenantId, tenantId)) : eq(chatbots.id, id);\n    const [updatedChatbot] = await db\n      .update(chatbots)\n      .set({ ...chatbot, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedChatbot;\n  }\n\n  async deleteChatbot(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(chatbots.id, id), eq(chatbots.tenantId, tenantId)) : eq(chatbots.id, id);\n    await db.delete(chatbots).where(conditions);\n  }\n\n  // Lead operations\n  async getLead(id: string, tenantId?: string): Promise<Lead | undefined> {\n    const conditions = tenantId ? and(eq(leads.id, id), eq(leads.tenantId, tenantId)) : eq(leads.id, id);\n    const [lead] = await db.select().from(leads).where(conditions);\n    return lead;\n  }\n\n  async getLeadsByTenant(tenantId: string): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.tenantId, tenantId)).orderBy(desc(leads.createdAt));\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values(lead).returning();\n    return newLead;\n  }\n\n  async updateLead(id: string, lead: Partial<InsertLead>, tenantId?: string): Promise<Lead> {\n    const conditions = tenantId ? and(eq(leads.id, id), eq(leads.tenantId, tenantId)) : eq(leads.id, id);\n    const [updatedLead] = await db\n      .update(leads)\n      .set({ ...lead, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedLead;\n  }\n\n  async deleteLead(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(leads.id, id), eq(leads.tenantId, tenantId)) : eq(leads.id, id);\n    await db.delete(leads).where(conditions);\n  }\n\n  // Appointment operations\n  async getAppointment(id: string, tenantId?: string): Promise<Appointment | undefined> {\n    const conditions = tenantId ? and(eq(appointments.id, id), eq(appointments.tenantId, tenantId)) : eq(appointments.id, id);\n    const [appointment] = await db.select().from(appointments).where(conditions);\n    return appointment;\n  }\n\n  async getAppointmentsByTenant(tenantId: string): Promise<Appointment[]> {\n    return await db.select().from(appointments).where(eq(appointments.tenantId, tenantId)).orderBy(asc(appointments.scheduledAt));\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const [newAppointment] = await db.insert(appointments).values(appointment).returning();\n    return newAppointment;\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>, tenantId?: string): Promise<Appointment> {\n    const conditions = tenantId ? and(eq(appointments.id, id), eq(appointments.tenantId, tenantId)) : eq(appointments.id, id);\n    const [updatedAppointment] = await db\n      .update(appointments)\n      .set({ ...appointment, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedAppointment;\n  }\n\n  async deleteAppointment(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(appointments.id, id), eq(appointments.tenantId, tenantId)) : eq(appointments.id, id);\n    await db.delete(appointments).where(conditions);\n  }\n\n  // Service operations\n  async getService(id: string, tenantId?: string): Promise<Service | undefined> {\n    const conditions = tenantId ? and(eq(services.id, id), eq(services.tenantId, tenantId)) : eq(services.id, id);\n    const [service] = await db.select().from(services).where(conditions);\n    return service;\n  }\n\n  async getServicesByTenant(tenantId: string): Promise<Service[]> {\n    return await db.select().from(services).where(eq(services.tenantId, tenantId)).orderBy(asc(services.name));\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const [newService] = await db.insert(services).values(service).returning();\n    return newService;\n  }\n\n  async updateService(id: string, service: Partial<InsertService>, tenantId?: string): Promise<Service> {\n    const conditions = tenantId ? and(eq(services.id, id), eq(services.tenantId, tenantId)) : eq(services.id, id);\n    const [updatedService] = await db\n      .update(services)\n      .set({ ...service, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedService;\n  }\n\n  async deleteService(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(services.id, id), eq(services.tenantId, tenantId)) : eq(services.id, id);\n    await db.delete(services).where(conditions);\n  }\n\n  // Knowledge Base operations\n  async getKnowledgeBaseItem(id: string, tenantId?: string): Promise<KnowledgeBase | undefined> {\n    const conditions = tenantId ? and(eq(knowledgeBase.id, id), eq(knowledgeBase.tenantId, tenantId)) : eq(knowledgeBase.id, id);\n    const [item] = await db.select().from(knowledgeBase).where(conditions);\n    return item;\n  }\n\n  async getKnowledgeBaseByTenant(tenantId: string): Promise<KnowledgeBase[]> {\n    return await db.select().from(knowledgeBase).where(eq(knowledgeBase.tenantId, tenantId)).orderBy(desc(knowledgeBase.usage_count));\n  }\n\n  async createKnowledgeBaseItem(item: InsertKnowledgeBase): Promise<KnowledgeBase> {\n    const [newItem] = await db.insert(knowledgeBase).values(item).returning();\n    return newItem;\n  }\n\n  async updateKnowledgeBaseItem(id: string, item: Partial<InsertKnowledgeBase>, tenantId?: string): Promise<KnowledgeBase> {\n    const conditions = tenantId ? and(eq(knowledgeBase.id, id), eq(knowledgeBase.tenantId, tenantId)) : eq(knowledgeBase.id, id);\n    const [updatedItem] = await db\n      .update(knowledgeBase)\n      .set({ ...item, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedItem;\n  }\n\n  async deleteKnowledgeBaseItem(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(knowledgeBase.id, id), eq(knowledgeBase.tenantId, tenantId)) : eq(knowledgeBase.id, id);\n    await db.delete(knowledgeBase).where(conditions);\n  }\n\n  // Website Content operations\n  async getWebsiteContent(id: string, tenantId?: string): Promise<WebsiteContent | undefined> {\n    const conditions = tenantId ? and(eq(websiteContent.id, id), eq(websiteContent.tenantId, tenantId)) : eq(websiteContent.id, id);\n    const [content] = await db.select().from(websiteContent).where(conditions);\n    return content;\n  }\n\n  async getWebsiteContentByTenant(tenantId: string): Promise<WebsiteContent[]> {\n    return await db.select().from(websiteContent).where(eq(websiteContent.tenantId, tenantId)).orderBy(desc(websiteContent.extractedAt));\n  }\n\n  async createWebsiteContent(content: InsertWebsiteContent): Promise<WebsiteContent> {\n    const [newContent] = await db.insert(websiteContent).values(content).returning();\n    return newContent;\n  }\n\n  async updateWebsiteContent(id: string, content: Partial<InsertWebsiteContent>, tenantId?: string): Promise<WebsiteContent> {\n    const conditions = tenantId ? and(eq(websiteContent.id, id), eq(websiteContent.tenantId, tenantId)) : eq(websiteContent.id, id);\n    const [updatedContent] = await db\n      .update(websiteContent)\n      .set({ ...content, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedContent;\n  }\n\n  async deleteWebsiteContent(id: string, tenantId?: string): Promise<void> {\n    const conditions = tenantId ? and(eq(websiteContent.id, id), eq(websiteContent.tenantId, tenantId)) : eq(websiteContent.id, id);\n    await db.delete(websiteContent).where(conditions);\n  }\n\n  // Conversation operations\n  async getConversation(id: string, tenantId?: string): Promise<Conversation | undefined> {\n    const conditions = tenantId ? and(eq(conversations.id, id), eq(conversations.tenantId, tenantId)) : eq(conversations.id, id);\n    const [conversation] = await db.select().from(conversations).where(conditions);\n    return conversation;\n  }\n\n  async getConversationsByTenant(tenantId: string): Promise<Conversation[]> {\n    return await db.select().from(conversations).where(eq(conversations.tenantId, tenantId)).orderBy(desc(conversations.createdAt));\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [newConversation] = await db.insert(conversations).values(conversation).returning();\n    return newConversation;\n  }\n\n  async updateConversation(id: string, conversation: Partial<InsertConversation>, tenantId?: string): Promise<Conversation> {\n    const conditions = tenantId ? and(eq(conversations.id, id), eq(conversations.tenantId, tenantId)) : eq(conversations.id, id);\n    const [updatedConversation] = await db\n      .update(conversations)\n      .set({ ...conversation, updatedAt: new Date() })\n      .where(conditions)\n      .returning();\n    return updatedConversation;\n  }\n\n  // Analytics operations\n  async getAnalyticsByTenant(tenantId: string, startDate?: Date, endDate?: Date): Promise<Analytics[]> {\n    let query = db.select().from(analytics).where(eq(analytics.tenantId, tenantId));\n    \n    if (startDate && endDate) {\n      query = query.where(and(\n        eq(analytics.tenantId, tenantId),\n        and(\n          eq(analytics.date, startDate),\n          eq(analytics.date, endDate)\n        )\n      ));\n    }\n    \n    return await query.orderBy(desc(analytics.date));\n  }\n\n  async createAnalytics(analyticsData: InsertAnalytics): Promise<Analytics> {\n    const [newAnalytics] = await db.insert(analytics).values(analyticsData).returning();\n    return newAnalytics;\n  }\n\n  // Dashboard aggregations\n  async getTenantStats(tenantId: string): Promise<{\n    totalConversations: number;\n    newLeads: number;\n    appointmentsScheduled: number;\n    averageSatisfaction: number;\n  }> {\n    const [conversationCount] = await db\n      .select({ count: count() })\n      .from(conversations)\n      .where(eq(conversations.tenantId, tenantId));\n\n    const [leadCount] = await db\n      .select({ count: count() })\n      .from(leads)\n      .where(eq(leads.tenantId, tenantId));\n\n    const [appointmentCount] = await db\n      .select({ count: count() })\n      .from(appointments)\n      .where(eq(appointments.tenantId, tenantId));\n\n    const [satisfactionAvg] = await db\n      .select({ avg: avg(conversations.satisfactionRating) })\n      .from(conversations)\n      .where(eq(conversations.tenantId, tenantId));\n\n    return {\n      totalConversations: conversationCount.count,\n      newLeads: leadCount.count,\n      appointmentsScheduled: appointmentCount.count,\n      averageSatisfaction: satisfactionAvg.avg ? parseFloat(satisfactionAvg.avg) : 0,\n    };\n  }\n\n  // Superadmin operations\n  async getAllTenantsStats(): Promise<{\n    totalTenants: number;\n    activeTenants: number;\n    totalConversations: number;\n    totalLeads: number;\n  }> {\n    const [tenantCount] = await db.select({ count: count() }).from(tenants);\n    \n    const [activeTenantCount] = await db\n      .select({ count: count() })\n      .from(tenants)\n      .where(eq(tenants.subscriptionStatus, 'active'));\n\n    const [conversationCount] = await db.select({ count: count() }).from(conversations);\n    const [leadCount] = await db.select({ count: count() }).from(leads);\n\n    return {\n      totalTenants: tenantCount.count,\n      activeTenants: activeTenantCount.count,\n      totalConversations: conversationCount.count,\n      totalLeads: leadCount.count,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20167},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['superadmin', 'business_admin', 'business_member']);\nexport const leadStatusEnum = pgEnum('lead_status', ['new', 'contacted', 'qualified', 'converted', 'lost']);\nexport const appointmentStatusEnum = pgEnum('appointment_status', ['scheduled', 'confirmed', 'completed', 'cancelled', 'no_show']);\nexport const subscriptionStatusEnum = pgEnum('subscription_status', ['active', 'inactive', 'cancelled', 'past_due', 'trialing']);\nexport const chatbotStatusEnum = pgEnum('chatbot_status', ['draft', 'published', 'archived']);\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default('business_member'),\n  tenantId: varchar(\"tenant_id\").references(() => tenants.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Tenants table\nexport const tenants = pgTable(\"tenants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  domain: varchar(\"domain\").unique(),\n  website: varchar(\"website\"),\n  logoUrl: varchar(\"logo_url\"),\n  subscriptionStatus: subscriptionStatusEnum(\"subscription_status\").default('trialing'),\n  subscriptionPlan: varchar(\"subscription_plan\").default('starter'),\n  subscriptionEndsAt: timestamp(\"subscription_ends_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chatbots table\nexport const chatbots = pgTable(\"chatbots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  status: chatbotStatusEnum(\"status\").default('draft'),\n  welcomeMessage: text(\"welcome_message\"),\n  fallbackMessage: text(\"fallback_message\"),\n  theme: jsonb(\"theme\"), // Colors, styling, etc.\n  flows: jsonb(\"flows\"), // Conversation flows\n  isActive: boolean(\"is_active\").default(false),\n  embedCode: text(\"embed_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leads table\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  chatbotId: varchar(\"chatbot_id\").references(() => chatbots.id),\n  email: varchar(\"email\"),\n  name: varchar(\"name\"),\n  phone: varchar(\"phone\"),\n  source: varchar(\"source\"), // 'chatbot', 'website', 'manual'\n  score: integer(\"score\").default(0), // Lead scoring 0-100\n  status: leadStatusEnum(\"status\").default('new'),\n  notes: text(\"notes\"),\n  metadata: jsonb(\"metadata\"), // Additional lead data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  leadId: varchar(\"lead_id\").references(() => leads.id),\n  serviceId: varchar(\"service_id\").references(() => services.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(30), // minutes\n  status: appointmentStatusEnum(\"status\").default('scheduled'),\n  meetingLink: varchar(\"meeting_link\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  duration: integer(\"duration\").default(30), // minutes\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  availableSlots: jsonb(\"available_slots\"), // Available time slots\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Q&A Knowledge Base table\nexport const knowledgeBase = pgTable(\"knowledge_base\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  tags: text(\"tags\").array(), // Array of tags\n  isActive: boolean(\"is_active\").default(true),\n  usage_count: integer(\"usage_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Website Content table (for AI training)\nexport const websiteContent = pgTable(\"website_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  url: varchar(\"url\").notNull(),\n  title: varchar(\"title\"),\n  content: text(\"content\"),\n  extractedAt: timestamp(\"extracted_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Conversations table\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  chatbotId: varchar(\"chatbot_id\").notNull().references(() => chatbots.id),\n  leadId: varchar(\"lead_id\").references(() => leads.id),\n  sessionId: varchar(\"session_id\"),\n  messages: jsonb(\"messages\"), // Array of message objects\n  metadata: jsonb(\"metadata\"),\n  satisfactionRating: integer(\"satisfaction_rating\"), // 1-5\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analytics table\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: varchar(\"tenant_id\").notNull().references(() => tenants.id),\n  chatbotId: varchar(\"chatbot_id\").references(() => chatbots.id),\n  date: timestamp(\"date\").notNull(),\n  totalConversations: integer(\"total_conversations\").default(0),\n  newLeads: integer(\"new_leads\").default(0),\n  appointmentsScheduled: integer(\"appointments_scheduled\").default(0),\n  satisfactionScore: decimal(\"satisfaction_score\", { precision: 3, scale: 2 }),\n  responseRate: decimal(\"response_rate\", { precision: 5, scale: 2 }),\n  conversionRate: decimal(\"conversion_rate\", { precision: 5, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [users.tenantId],\n    references: [tenants.id],\n  }),\n}));\n\nexport const tenantsRelations = relations(tenants, ({ many }) => ({\n  users: many(users),\n  chatbots: many(chatbots),\n  leads: many(leads),\n  appointments: many(appointments),\n  services: many(services),\n  knowledgeBase: many(knowledgeBase),\n  websiteContent: many(websiteContent),\n  conversations: many(conversations),\n  analytics: many(analytics),\n}));\n\nexport const chatbotsRelations = relations(chatbots, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [chatbots.tenantId],\n    references: [tenants.id],\n  }),\n  conversations: many(conversations),\n  leads: many(leads),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [leads.tenantId],\n    references: [tenants.id],\n  }),\n  chatbot: one(chatbots, {\n    fields: [leads.chatbotId],\n    references: [chatbots.id],\n  }),\n  appointments: many(appointments),\n  conversations: many(conversations),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [appointments.tenantId],\n    references: [tenants.id],\n  }),\n  lead: one(leads, {\n    fields: [appointments.leadId],\n    references: [leads.id],\n  }),\n  service: one(services, {\n    fields: [appointments.serviceId],\n    references: [services.id],\n  }),\n}));\n\nexport const servicesRelations = relations(services, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [services.tenantId],\n    references: [tenants.id],\n  }),\n  appointments: many(appointments),\n}));\n\nexport const knowledgeBaseRelations = relations(knowledgeBase, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [knowledgeBase.tenantId],\n    references: [tenants.id],\n  }),\n}));\n\nexport const websiteContentRelations = relations(websiteContent, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [websiteContent.tenantId],\n    references: [tenants.id],\n  }),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [conversations.tenantId],\n    references: [tenants.id],\n  }),\n  chatbot: one(chatbots, {\n    fields: [conversations.chatbotId],\n    references: [chatbots.id],\n  }),\n  lead: one(leads, {\n    fields: [conversations.leadId],\n    references: [leads.id],\n  }),\n}));\n\nexport const analyticsRelations = relations(analytics, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [analytics.tenantId],\n    references: [tenants.id],\n  }),\n  chatbot: one(chatbots, {\n    fields: [analytics.chatbotId],\n    references: [chatbots.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatbotSchema = createInsertSchema(chatbots).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertKnowledgeBaseSchema = createInsertSchema(knowledgeBase).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWebsiteContentSchema = createInsertSchema(websiteContent).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Tenant = typeof tenants.$inferSelect;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\nexport type Chatbot = typeof chatbots.$inferSelect;\nexport type InsertChatbot = z.infer<typeof insertChatbotSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type KnowledgeBase = typeof knowledgeBase.$inferSelect;\nexport type InsertKnowledgeBase = z.infer<typeof insertKnowledgeBaseSchema>;\nexport type WebsiteContent = typeof websiteContent.$inferSelect;\nexport type InsertWebsiteContent = z.infer<typeof insertWebsiteContentSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\n","size_bytes":12871},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import pages\nimport Landing from \"@/pages/landing\";\nimport SimpleAuth from \"@/pages/simple-auth\";\nimport Setup from \"@/pages/setup\";\nimport SuperAdminDashboard from \"@/pages/superadmin/dashboard\";\nimport SuperAdminTenants from \"@/pages/superadmin/tenants\";\nimport SuperAdminBilling from \"@/pages/superadmin/billing\";\nimport SuperAdminSettings from \"@/pages/superadmin/settings\";\nimport BusinessDashboard from \"@/pages/business/dashboard\";\nimport ChatbotDesigner from \"@/pages/business/chatbot-designer\";\nimport Leads from \"@/pages/business/leads\";\nimport Appointments from \"@/pages/business/appointments\";\nimport Products from \"@/pages/business/products\";\nimport QAManagement from \"@/pages/business/qa-management\";\nimport AITraining from \"@/pages/business/ai-training\";\nimport Settings from \"@/pages/business/settings\";\n\nfunction Router() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/setup\" component={Setup} />\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/auth\" component={SimpleAuth} />\n          <Route path=\"/\" component={Landing} />\n        </>\n      ) : (user as any)?.role === 'superadmin' ? (\n        <>\n          <Route path=\"/\" component={SuperAdminDashboard} />\n          <Route path=\"/tenants\" component={SuperAdminTenants} />\n          <Route path=\"/billing\" component={SuperAdminBilling} />\n          <Route path=\"/settings\" component={SuperAdminSettings} />\n        </>\n      ) : (user as any)?.tenantId ? (\n        <>\n          <Route path=\"/\" component={BusinessDashboard} />\n          <Route path=\"/chatbot-designer\" component={ChatbotDesigner} />\n          <Route path=\"/leads\" component={Leads} />\n          <Route path=\"/appointments\" component={Appointments} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/qa-management\" component={QAManagement} />\n          <Route path=\"/ai-training\" component={AITraining} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      ) : (\n        // User is authenticated but has no tenant - needs tenant creation/join\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/setup\" component={Setup} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3071},"client/src/index.css":{"content":"@import 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap';\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(239 84% 67%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(262 73% 60%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(188 100% 42%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(239 84% 67%);\n  --chart-1: hsl(239 84% 67%);\n  --chart-2: hsl(262 73% 60%);\n  --chart-3: hsl(188 100% 42%);\n  --chart-4: hsl(142 76% 36%);\n  --chart-5: hsl(346 87% 43%);\n  --sidebar: hsl(222 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(239 84% 67%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(239 84% 67%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(239 84% 67%);\n  --success: hsl(142 76% 36%);\n  --success-foreground: hsl(0 0% 100%);\n  --warning: hsl(38 92% 50%);\n  --warning-foreground: hsl(0 0% 100%);\n  --error: hsl(0 84% 60%);\n  --error-foreground: hsl(0 0% 100%);\n  --dark: hsl(222 84% 4.9%);\n  --surface: hsl(217 32% 17%);\n  --surface-foreground: hsl(210 40% 98%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.10);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 10px 15px -3px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-lg: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n}\n\n.dark {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(239 84% 67%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(262 73% 60%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(188 100% 42%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(239 84% 67%);\n  --sidebar: hsl(222 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(239 84% 67%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(239 84% 67%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(239 84% 67%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .gradient-border {\n    @apply relative overflow-hidden;\n  }\n  \n  .gradient-border::before {\n    content: '';\n    @apply absolute inset-0 rounded-lg p-px bg-gradient-to-r from-primary via-accent to-secondary;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n  }\n\n  .glass-effect {\n    @apply backdrop-blur-sm bg-white/5 border border-white/10;\n  }\n\n  .hover-glow {\n    @apply transition-all duration-300 hover:shadow-lg hover:shadow-blue-500/25;\n  }\n}\n","size_bytes":3984},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiService.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"../storage\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"sk-default-key\"\n});\n\nexport class AIService {\n  async trainChatbot(tenantId: string, chatbotId: string, contentIds: string[]) {\n    try {\n      // Get all website content for the tenant\n      const allContent = await storage.getWebsiteContentByTenant(tenantId);\n      const selectedContent = contentIds.length > 0 \n        ? allContent.filter(content => contentIds.includes(content.id!))\n        : allContent;\n\n      if (selectedContent.length === 0) {\n        throw new Error(\"No content available for training\");\n      }\n\n      // Combine all content into training data\n      const combinedContent = selectedContent\n        .map(content => `URL: ${content.url}\\nTitle: ${content.title}\\nContent: ${content.content}`)\n        .join('\\n\\n---\\n\\n');\n\n      // Generate embeddings or training summary\n      const trainingPrompt = `\n        Analyze the following website content and create a comprehensive knowledge base for a chatbot.\n        Extract key information about products, services, company details, FAQ, and any other relevant information.\n        Format the response as JSON with categories and key points.\n\n        Content:\n        ${combinedContent}\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an AI trainer that creates knowledge bases for chatbots. Analyze content and extract structured information.\"\n          },\n          {\n            role: \"user\",\n            content: trainingPrompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 4000\n      });\n\n      const trainingData = JSON.parse(response.choices[0].message.content || '{}');\n\n      // Update chatbot with training data\n      await storage.updateChatbot(chatbotId, {\n        flows: trainingData,\n        updatedAt: new Date()\n      }, tenantId);\n\n      return {\n        success: true,\n        message: \"Chatbot training completed successfully\",\n        contentProcessed: selectedContent.length,\n        trainingData\n      };\n    } catch (error) {\n      console.error(\"AI training error:\", error);\n      throw new Error(\"Failed to train chatbot with AI\");\n    }\n  }\n\n  async generateResponse(context: string, userMessage: string, knowledgeBase: any[]) {\n    try {\n      const kbContext = knowledgeBase\n        .map(item => `Q: ${item.question}\\nA: ${item.answer}`)\n        .join('\\n\\n');\n\n      const prompt = `\n        You are a helpful business chatbot. Use the provided context and knowledge base to answer the user's question.\n        If you don't have enough information, politely explain what you can help with instead.\n\n        Context: ${context}\n        \n        Knowledge Base:\n        ${kbContext}\n\n        User Question: ${userMessage}\n\n        Respond in a helpful, professional manner. If appropriate, offer to schedule an appointment or provide contact information.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional business chatbot assistant. Be helpful, accurate, and conversational.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response at this time.\";\n    } catch (error) {\n      console.error(\"AI response generation error:\", error);\n      return \"I'm experiencing technical difficulties. Please try again later or contact support.\";\n    }\n  }\n\n  async generateLeadScore(leadData: any) {\n    try {\n      const prompt = `\n        Analyze the following lead data and provide a score from 0-100 based on likelihood to convert.\n        Consider factors like engagement level, information provided, source, and any behavioral indicators.\n\n        Lead Data:\n        ${JSON.stringify(leadData, null, 2)}\n\n        Respond with JSON containing:\n        {\n          \"score\": number (0-100),\n          \"reasoning\": \"explanation of the score\",\n          \"recommendations\": [\"action1\", \"action2\"]\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a lead scoring AI that analyzes customer data to predict conversion likelihood.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 500\n      });\n\n      return JSON.parse(response.choices[0].message.content || '{\"score\": 50, \"reasoning\": \"Unable to analyze\", \"recommendations\": []}');\n    } catch (error) {\n      console.error(\"Lead scoring error:\", error);\n      return {\n        score: 50,\n        reasoning: \"Error in scoring algorithm\",\n        recommendations: [\"Manual review recommended\"]\n      };\n    }\n  }\n\n  async extractLeadFromConversation(messages: any[]) {\n    try {\n      const conversation = messages\n        .map(msg => `${msg.role}: ${msg.content}`)\n        .join('\\n');\n\n      const prompt = `\n        Analyze this chatbot conversation and extract lead information.\n        Look for name, email, phone, company, interests, and any other relevant contact details.\n\n        Conversation:\n        ${conversation}\n\n        Respond with JSON containing extracted lead data:\n        {\n          \"name\": \"string or null\",\n          \"email\": \"string or null\", \n          \"phone\": \"string or null\",\n          \"company\": \"string or null\",\n          \"interests\": [\"array of interests\"],\n          \"notes\": \"summary of conversation and interests\"\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a lead extraction AI that identifies potential customer information from conversations.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 500\n      });\n\n      return JSON.parse(response.choices[0].message.content || '{}');\n    } catch (error) {\n      console.error(\"Lead extraction error:\", error);\n      return null;\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":6796},"server/services/chatbotService.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"../storage\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface ChatbotResponse {\n  message: string;\n  isLead?: boolean;\n  leadData?: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n    message?: string;\n  };\n  suggestedAppointment?: boolean;\n}\n\nexport class ChatbotService {\n  async processMessage(\n    chatbotId: string,\n    message: string,\n    context: any = {}\n  ): Promise<ChatbotResponse> {\n    try {\n      // Get chatbot configuration\n      const chatbot = await storage.getChatbot(chatbotId);\n      if (!chatbot) {\n        throw new Error(\"Chatbot not found\");\n      }\n\n      // Get relevant knowledge base entries\n      const knowledgeBase = await storage.getKnowledgeBaseByTenant(chatbot.tenantId);\n      const contextualKnowledge = knowledgeBase\n        .filter(kb => \n          message.toLowerCase().includes(kb.question.toLowerCase()) ||\n          kb.tags.some(tag => message.toLowerCase().includes(tag.toLowerCase()))\n        )\n        .slice(0, 3);\n\n      // Build system prompt\n      const systemPrompt = `You are ${chatbot.name}, an AI assistant for ${chatbot.tenantId}. \n\nYour role:\n- Provide helpful customer support\n- Identify potential leads and extract contact information\n- Suggest appointments when appropriate\n- Use the knowledge base to answer questions accurately\n\nKnowledge Base:\n${contextualKnowledge.map(kb => `Q: ${kb.question}\\nA: ${kb.answer}`).join('\\n\\n')}\n\nGuidelines:\n- Be friendly and professional\n- If you detect contact information (name, email, phone), flag this as a lead\n- If the user expresses interest in services or wants to schedule something, suggest an appointment\n- Always respond in JSON format with: { \"message\": \"your response\", \"isLead\": boolean, \"leadData\": {...}, \"suggestedAppointment\": boolean }`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: message }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"message\": \"I apologize, but I encountered an error processing your request.\"}');\n\n      // Save lead if detected\n      if (result.isLead && result.leadData) {\n        await storage.createLead({\n          tenantId: chatbot.tenantId,\n          chatbotId: chatbotId,\n          name: result.leadData.name,\n          email: result.leadData.email,\n          phone: result.leadData.phone,\n          company: result.leadData.company,\n          message: result.leadData.message || message,\n          status: 'new',\n          source: 'chatbot',\n        });\n      }\n\n      return result;\n    } catch (error) {\n      console.error(\"Error processing chatbot message:\", error);\n      return {\n        message: \"I apologize, but I'm currently experiencing technical difficulties. Please try again later.\",\n      };\n    }\n  }\n\n  async trainChatbot(chatbotId: string, websiteContent: string[]): Promise<void> {\n    try {\n      const chatbot = await storage.getChatbot(chatbotId);\n      if (!chatbot) {\n        throw new Error(\"Chatbot not found\");\n      }\n\n      // Process website content with OpenAI to generate knowledge base entries\n      const prompt = `Analyze the following website content and generate Q&A pairs for a customer support chatbot.\n\nWebsite Content:\n${websiteContent.join('\\n\\n')}\n\nGenerate 10-15 relevant Q&A pairs that customers might ask about this business. Format as JSON array:\n[{\"question\": \"...\", \"answer\": \"...\", \"tags\": [\"tag1\", \"tag2\"]}]`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const qaPairs = JSON.parse(response.choices[0].message.content || '[]');\n\n      // Save to knowledge base\n      for (const qa of qaPairs) {\n        await storage.createKnowledgeBase({\n          tenantId: chatbot.tenantId,\n          question: qa.question,\n          answer: qa.answer,\n          tags: qa.tags || [],\n        });\n      }\n\n      console.log(`Generated ${qaPairs.length} knowledge base entries for chatbot ${chatbotId}`);\n    } catch (error) {\n      console.error(\"Error training chatbot:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const chatbotService = new ChatbotService();","size_bytes":4622},"server/services/scrapingService.ts":{"content":"import puppeteer from 'puppeteer';\n\nexport interface ScrapedContent {\n  url: string;\n  title: string;\n  content: string;\n  links: string[];\n  images: string[];\n}\n\nexport class ScrapingService {\n  async scrapeWebsite(url: string, maxPages: number = 5): Promise<ScrapedContent[]> {\n    let browser;\n    try {\n      browser = await puppeteer.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n      });\n\n      const results: ScrapedContent[] = [];\n      const visitedUrls = new Set<string>();\n      const urlsToVisit = [url];\n\n      while (urlsToVisit.length > 0 && results.length < maxPages) {\n        const currentUrl = urlsToVisit.shift()!;\n        \n        if (visitedUrls.has(currentUrl)) continue;\n        visitedUrls.add(currentUrl);\n\n        try {\n          const page = await browser.newPage();\n          await page.setUserAgent('Mozilla/5.0 (compatible; ChatbotScraper/1.0)');\n          \n          // Navigate to page with timeout\n          await page.goto(currentUrl, { \n            waitUntil: 'networkidle2', \n            timeout: 30000 \n          });\n\n          // Extract content\n          const content = await page.evaluate(() => {\n            // Remove script and style elements\n            const scripts = document.querySelectorAll('script, style');\n            scripts.forEach(el => el.remove());\n\n            // Get title\n            const title = document.title || '';\n\n            // Get main content\n            const contentSelectors = [\n              'main', \n              '[role=\"main\"]', \n              '.content', \n              '.main-content',\n              'article',\n              '.container',\n              'body'\n            ];\n\n            let mainContent = '';\n            for (const selector of contentSelectors) {\n              const element = document.querySelector(selector);\n              if (element) {\n                mainContent = element.innerText || element.textContent || '';\n                break;\n              }\n            }\n\n            // Get all links\n            const links = Array.from(document.querySelectorAll('a[href]'))\n              .map(a => (a as HTMLAnchorElement).href)\n              .filter(href => href && href.startsWith('http'));\n\n            // Get images\n            const images = Array.from(document.querySelectorAll('img[src]'))\n              .map(img => (img as HTMLImageElement).src)\n              .filter(src => src && src.startsWith('http'));\n\n            return {\n              title: title.trim(),\n              content: mainContent.trim().substring(0, 5000), // Limit content length\n              links,\n              images\n            };\n          });\n\n          results.push({\n            url: currentUrl,\n            title: content.title,\n            content: content.content,\n            links: content.links,\n            images: content.images\n          });\n\n          // Add internal links to visit queue\n          const baseDomain = new URL(currentUrl).hostname;\n          const internalLinks = content.links\n            .filter(link => {\n              try {\n                return new URL(link).hostname === baseDomain;\n              } catch {\n                return false;\n              }\n            })\n            .slice(0, 3); // Limit links per page\n\n          urlsToVisit.push(...internalLinks);\n\n          await page.close();\n        } catch (pageError) {\n          console.error(`Error scraping ${currentUrl}:`, pageError);\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error(\"Error in scraping service:\", error);\n      throw error;\n    } finally {\n      if (browser) {\n        await browser.close();\n      }\n    }\n  }\n\n  async extractBusinessInfo(content: ScrapedContent[]): Promise<{\n    businessName?: string;\n    services?: string[];\n    contactInfo?: {\n      phone?: string;\n      email?: string;\n      address?: string;\n    };\n    description?: string;\n  }> {\n    try {\n      const allContent = content.map(c => `${c.title}\\n${c.content}`).join('\\n\\n');\n      \n      // Extract phone numbers\n      const phoneRegex = /(?:\\+?1[-.\\s]?)?(?:\\([0-9]{3}\\)|[0-9]{3})[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}/g;\n      const phones = allContent.match(phoneRegex) || [];\n\n      // Extract email addresses\n      const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n      const emails = allContent.match(emailRegex) || [];\n\n      // Extract potential business name (often in title or h1)\n      const businessName = content[0]?.title?.split(' - ')[0]?.split(' | ')[0]?.trim();\n\n      return {\n        businessName,\n        services: [], // Could be enhanced with NLP\n        contactInfo: {\n          phone: phones[0],\n          email: emails[0],\n        },\n        description: content[0]?.content?.substring(0, 500)\n      };\n    } catch (error) {\n      console.error(\"Error extracting business info:\", error);\n      return {};\n    }\n  }\n}\n\nexport const scrapingService = new ScrapingService();","size_bytes":4963},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchInterval: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":454},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private tenantId: string | null = null;\n  private listeners: Map<string, (data: any) => void> = new Map();\n\n  constructor() {\n    this.connect();\n  }\n\n  private connect() {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      this.ws = new WebSocket(wsUrl);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        \n        // Subscribe to tenant updates if we have a tenantId\n        if (this.tenantId) {\n          this.send({\n            type: 'subscribe_tenant',\n            tenantId: this.tenantId\n          });\n        }\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.scheduleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      setTimeout(() => {\n        this.reconnectAttempts++;\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, this.reconnectDelay * Math.pow(2, this.reconnectAttempts));\n    }\n  }\n\n  private handleMessage(data: any) {\n    const { type } = data;\n    \n    // Call registered listeners\n    const listener = this.listeners.get(type);\n    if (listener) {\n      listener(data);\n    }\n\n    // Handle specific message types\n    switch (type) {\n      case 'subscribed':\n        console.log('Subscribed to tenant updates:', data.tenantId);\n        break;\n      case 'new_lead':\n        this.notifyListeners('lead_update', data);\n        break;\n      case 'new_appointment':\n        this.notifyListeners('appointment_update', data);\n        break;\n      case 'conversation_update':\n        this.notifyListeners('conversation_update', data);\n        break;\n      case 'analytics_update':\n        this.notifyListeners('analytics_update', data);\n        break;\n    }\n  }\n\n  private notifyListeners(event: string, data: any) {\n    const listener = this.listeners.get(event);\n    if (listener) {\n      listener(data);\n    }\n  }\n\n  public send(data: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    }\n  }\n\n  public subscribeTenant(tenantId: string) {\n    this.tenantId = tenantId;\n    this.send({\n      type: 'subscribe_tenant',\n      tenantId\n    });\n  }\n\n  public addEventListener(event: string, callback: (data: any) => void) {\n    this.listeners.set(event, callback);\n  }\n\n  public removeEventListener(event: string) {\n    this.listeners.delete(event);\n  }\n\n  public disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  public isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\n\n// Singleton instance\nexport const wsManager = new WebSocketManager();\n","size_bytes":3569},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Bot, MessageSquare, Users, Calendar, BarChart3, Zap, Shield, Globe } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Landing() {\n  const { isAuthenticated } = useAuth();\n  \n  const handleLogin = () => {\n    window.location.href = \"/auth\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-indigo-900\">\n      {/* Header */}\n      <header className=\"container mx-auto px-6 py-4\">\n        <nav className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold text-white\">ChatBot Pro</span>\n          </div>\n          <div className=\"flex gap-2\">\n            {isAuthenticated ? (\n              <>\n                <Button onClick={() => window.location.href = '/setup'} className=\"bg-primary hover:bg-primary/90 text-white\">\n                  Create Tenant\n                </Button>\n                <Button onClick={() => {\n                  fetch('/api/logout', { method: 'POST', credentials: 'include' })\n                    .then(() => window.location.reload());\n                }} variant=\"outline\" className=\"text-white border-white hover:bg-white hover:text-gray-900\">\n                  Sign Out\n                </Button>\n              </>\n            ) : (\n              <Button onClick={handleLogin} variant=\"outline\" className=\"text-white border-white hover:bg-white hover:text-gray-900\">\n                Sign In\n              </Button>\n            )}\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-6 py-20 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl font-bold text-white mb-6 leading-tight\">\n            {isAuthenticated ? 'Welcome! Create Your Business Tenant' : 'Transform Your Website with'} \n            <span className=\"text-primary\"> {isAuthenticated ? '' : 'AI-Powered Chatbots'}</span>\n          </h1>\n          <p className=\"text-xl text-gray-300 mb-8 leading-relaxed\">\n            {isAuthenticated \n              ? 'Set up your business tenant to start creating AI chatbots for your website. Capture leads, schedule appointments, and provide instant customer support.'\n              : 'Multi-tenant SaaS platform that helps businesses capture leads, schedule appointments, and provide instant customer support through intelligent chatbots.'\n            }\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            {isAuthenticated ? (\n              <Button size=\"lg\" onClick={() => window.location.href = '/setup'} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3\">\n                Create Your Tenant\n              </Button>\n            ) : (\n              <>\n                <Button size=\"lg\" onClick={handleLogin} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3\">\n                  Start Free Trial\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" className=\"text-white border-white hover:bg-white hover:text-gray-900\">\n                  View Demo\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-6 py-20\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">Everything You Need to Succeed</h2>\n          <p className=\"text-gray-300 text-lg\">Powerful features designed for modern businesses</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <MessageSquare className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">Smart Chatbots</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                AI-powered chatbots that understand context and provide intelligent responses\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <Users className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">Lead Management</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Automatically capture and score leads with advanced CRM integration\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <Calendar className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">Appointment Booking</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Seamless appointment scheduling directly through chat conversations\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <BarChart3 className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">Advanced Analytics</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Detailed insights into customer interactions and conversion metrics\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <Zap className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">AI Training</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Train your chatbot with website content for accurate, contextual responses\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700 hover:border-primary/50 transition-colors\">\n            <CardHeader>\n              <Shield className=\"w-10 h-10 text-primary mb-2\" />\n              <CardTitle className=\"text-white\">Enterprise Security</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                Multi-tenant architecture with advanced security and data isolation\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"container mx-auto px-6 py-20\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-white mb-6\">\n              Built for Modern Businesses\n            </h2>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start space-x-3\">\n                <Globe className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Multi-Language Support</h3>\n                  <p className=\"text-gray-300\">Serve global customers with chatbots that speak their language</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <Zap className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Real-time Integration</h3>\n                  <p className=\"text-gray-300\">Connect with your existing tools and workflows seamlessly</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <Shield className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">White-label Ready</h3>\n                  <p className=\"text-gray-300\">Customize branding and appearance to match your business</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <div className=\"bg-gradient-to-r from-primary/20 to-secondary/20 rounded-2xl p-8\">\n              <Card className=\"bg-gray-800/80 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Dashboard Preview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-300\">Total Conversations</span>\n                      <span className=\"text-white font-bold\">12,487</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-300\">New Leads</span>\n                      <span className=\"text-white font-bold\">284</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-300\">Appointments</span>\n                      <span className=\"text-white font-bold\">156</span>\n                    </div>\n                    <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                      <div className=\"bg-primary h-2 rounded-full\" style={{ width: '75%' }}></div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-6 py-20 text-center\">\n        <div className=\"max-w-3xl mx-auto\">\n          <h2 className=\"text-3xl font-bold text-white mb-6\">\n            Ready to Transform Your Customer Experience?\n          </h2>\n          <p className=\"text-gray-300 text-lg mb-8\">\n            Join thousands of businesses already using ChatBot Pro to increase conversions and improve customer satisfaction.\n          </p>\n          <Button size=\"lg\" onClick={handleLogin} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3\">\n            Start Your Free Trial Today\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-gray-800 py-8\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center\">\n                <Bot className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-white font-semibold\">ChatBot Pro</span>\n            </div>\n            <div className=\"text-gray-400 text-sm\">\n              © 2024 ChatBot Pro. All rights reserved.\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11494},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/setup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, Shield, Users, Building } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface SetupStatus {\n  hasSuperadmin: boolean;\n  totalUsers: number;\n}\n\nfunction TenantSetup({ user }: { user: any }) {\n  const [tenantData, setTenantData] = useState({\n    name: \"\",\n    domain: \"\",\n    website: \"\"\n  });\n\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/tenants\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      window.location.href = \"/\";\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createTenantMutation.mutate(tenantData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <Building className=\"h-16 w-16 mx-auto mb-4 text-primary\" />\n          <CardTitle className=\"text-2xl\">Create Your Business Tenant</CardTitle>\n          <CardDescription>\n            Set up your business profile to start creating AI chatbots\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Business Name</Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                placeholder=\"Your Business Name\"\n                value={tenantData.name}\n                onChange={(e) => setTenantData(prev => ({ ...prev, name: e.target.value }))}\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"domain\">Domain (Optional)</Label>\n              <Input\n                id=\"domain\"\n                type=\"text\"\n                placeholder=\"yourbusiness.com\"\n                value={tenantData.domain}\n                onChange={(e) => setTenantData(prev => ({ ...prev, domain: e.target.value }))}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"website\">Website (Optional)</Label>\n              <Input\n                id=\"website\"\n                type=\"url\"\n                placeholder=\"https://yourbusiness.com\"\n                value={tenantData.website}\n                onChange={(e) => setTenantData(prev => ({ ...prev, website: e.target.value }))}\n              />\n            </div>\n            \n            <Button type=\"submit\" className=\"w-full\" disabled={createTenantMutation.isPending}>\n              {createTenantMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating Tenant...\n                </>\n              ) : (\n                'Create Tenant'\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 pt-4 border-t text-center\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                fetch('/api/logout', { method: 'POST', credentials: 'include' })\n                  .then(() => window.location.href = '/');\n              }}\n              className=\"w-full\"\n            >\n              Sign Out\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function Setup() {\n  const { user, isAuthenticated } = useAuth();\n  const [promotionSuccess, setPromotionSuccess] = useState(false);\n\n  // Check setup status\n  const { data: setupStatus, isLoading: statusLoading } = useQuery<SetupStatus>({\n    queryKey: [\"/api/setup/status\"],\n    retry: false,\n  });\n\n  // Promote to superadmin mutation\n  const promoteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/setup/promote-superadmin\", \"POST\", {});\n    },\n    onSuccess: (data) => {\n      setPromotionSuccess(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/setup/status\"] });\n    },\n  });\n\n  if (statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex items-center gap-2\">\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\n          <span>Checking setup status...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // If user is authenticated but not superadmin, show tenant creation\n  if (isAuthenticated && setupStatus?.hasSuperadmin && (user as any)?.role !== 'superadmin') {\n    return <TenantSetup user={user} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <Shield className=\"h-16 w-16 mx-auto mb-4 text-primary\" />\n          <CardTitle className=\"text-2xl\">Platform Setup</CardTitle>\n          <CardDescription>\n            {setupStatus?.hasSuperadmin\n              ? \"Welcome back, Administrator\"\n              : \"Set up your multi-tenant chatbot platform\"\n            }\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {!isAuthenticated && (\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Please sign in to continue with the setup process.\n              </p>\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n                className=\"w-full\"\n              >\n                Sign In\n              </Button>\n            </div>\n          )}\n\n          {isAuthenticated && !setupStatus?.hasSuperadmin && !promotionSuccess && (\n            <div className=\"space-y-4\">\n              <Alert>\n                <Users className=\"h-4 w-4\" />\n                <AlertDescription>\n                  You're the first user! Become the platform administrator to manage tenants and users.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"text-sm text-muted-foreground space-y-2\">\n                <p><strong>As a superadmin, you'll be able to:</strong></p>\n                <ul className=\"list-disc list-inside ml-4 space-y-1\">\n                  <li>Create and manage business tenants</li>\n                  <li>View platform-wide analytics</li>\n                  <li>Manage user roles and permissions</li>\n                  <li>Monitor system performance</li>\n                </ul>\n              </div>\n\n              <Button \n                onClick={() => promoteMutation.mutate()}\n                disabled={promoteMutation.isPending}\n                className=\"w-full\"\n              >\n                {promoteMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Setting up...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Become Platform Administrator\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n\n          {promotionSuccess && (\n            <div className=\"text-center space-y-4\">\n              <Alert className=\"border-green-200 bg-green-50 text-green-800\">\n                <Shield className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Successfully set up as platform administrator!\n                </AlertDescription>\n              </Alert>\n              \n              <Button \n                onClick={() => window.location.href = '/'}\n                className=\"w-full\"\n              >\n                Go to Dashboard\n              </Button>\n            </div>\n          )}\n\n          {setupStatus?.hasSuperadmin && (user as any)?.role === 'superadmin' && (\n            <div className=\"text-center space-y-4\">\n              <Alert className=\"border-blue-200 bg-blue-50 text-blue-800\">\n                <Shield className=\"h-4 w-4\" />\n                <AlertDescription>\n                  You are signed in as platform administrator.\n                </AlertDescription>\n              </Alert>\n              \n              <Button \n                onClick={() => window.location.href = '/'}\n                className=\"w-full\"\n              >\n                Go to Dashboard\n              </Button>\n            </div>\n          )}\n\n          {promoteMutation.isError && (\n            <Alert className=\"border-red-200 bg-red-50 text-red-800\">\n              <AlertDescription>\n                {promoteMutation.error instanceof Error \n                  ? promoteMutation.error.message \n                  : \"Failed to set up administrator. Please try again.\"}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9475},"client/src/components/chatbot/ChatWidget.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Bot, X, Send, Minimize2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface ChatWidgetProps {\n  chatbotId: string;\n  config?: {\n    name?: string;\n    welcomeMessage?: string;\n    theme?: {\n      primaryColor?: string;\n      backgroundColor?: string;\n      textColor?: string;\n    };\n  };\n  className?: string;\n}\n\nexport default function ChatWidget({ chatbotId, config, className }: ChatWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId] = useState(() => crypto.randomUUID());\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const theme = config?.theme || {\n    primaryColor: '#6366F1',\n    backgroundColor: '#FFFFFF',\n    textColor: '#000000'\n  };\n\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      // Add welcome message\n      const welcomeMessage: Message = {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: config?.welcomeMessage || \"Hi! How can I help you today?\",\n        timestamp: new Date()\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [isOpen, config?.welcomeMessage]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const sendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: crypto.randomUUID(),\n      role: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(`/api/public/chat/${chatbotId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: inputValue,\n          sessionId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      const data = await response.json();\n\n      const assistantMessage: Message = {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      console.error('Chat error:', error);\n      const errorMessage: Message = {\n        id: crypto.randomUUID(),\n        role: 'assistant',\n        content: \"I'm sorry, I'm having trouble responding right now. Please try again later.\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  if (!isOpen) {\n    return (\n      <div className={cn(\"fixed bottom-6 right-6 z-50\", className)}>\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"w-14 h-14 rounded-full shadow-lg transition-all duration-300 hover:scale-110\"\n          style={{ backgroundColor: theme.primaryColor }}\n        >\n          <Bot className=\"w-6 h-6 text-white\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"fixed bottom-6 right-6 z-50 w-80\", className)}>\n      <Card \n        className=\"shadow-2xl border-0 overflow-hidden transition-all duration-300\"\n        style={{ backgroundColor: theme.backgroundColor }}\n      >\n        {/* Header */}\n        <CardHeader \n          className=\"p-4 text-white flex flex-row items-center justify-between space-y-0\"\n          style={{ backgroundColor: theme.primaryColor }}\n        >\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-4 h-4\" />\n            </div>\n            <span className=\"font-medium\">{config?.name || 'AI Assistant'}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMinimized(!isMinimized)}\n              className=\"w-8 h-8 p-0 text-white/80 hover:text-white hover:bg-white/10\"\n            >\n              <Minimize2 className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(false)}\n              className=\"w-8 h-8 p-0 text-white/80 hover:text-white hover:bg-white/10\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        {/* Messages */}\n        {!isMinimized && (\n          <>\n            <CardContent className=\"p-0\">\n              <div className=\"h-80 overflow-y-auto p-4 space-y-4\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={cn(\n                      \"flex\",\n                      message.role === 'user' ? 'justify-end' : 'justify-start'\n                    )}\n                  >\n                    {message.role === 'assistant' && (\n                      <div \n                        className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 mr-2 mt-1\"\n                        style={{ backgroundColor: theme.primaryColor }}\n                      >\n                        <Bot className=\"w-3 h-3 text-white\" />\n                      </div>\n                    )}\n                    <div\n                      className={cn(\n                        \"max-w-xs p-3 rounded-lg text-sm\",\n                        message.role === 'user'\n                          ? \"text-white\"\n                          : \"bg-gray-100\"\n                      )}\n                      style={{\n                        backgroundColor: message.role === 'user' ? theme.primaryColor : undefined,\n                        color: message.role === 'assistant' ? theme.textColor : undefined\n                      }}\n                    >\n                      <p>{message.content}</p>\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start\">\n                    <div \n                      className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 mr-2 mt-1\"\n                      style={{ backgroundColor: theme.primaryColor }}\n                    >\n                      <Bot className=\"w-3 h-3 text-white\" />\n                    </div>\n                    <div className=\"bg-gray-100 p-3 rounded-lg\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </CardContent>\n\n            {/* Input */}\n            <div className=\"p-3 border-t border-gray-200\">\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1 border-gray-300 focus:ring-2\"\n                  style={{ \n                    color: theme.textColor,\n                    borderColor: '#d1d5db'\n                  }}\n                  disabled={isLoading}\n                />\n                <Button\n                  onClick={sendMessage}\n                  disabled={!inputValue.trim() || isLoading}\n                  className=\"p-2\"\n                  style={{ backgroundColor: theme.primaryColor }}\n                >\n                  <Send className=\"w-4 h-4 text-white\" />\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8888},"client/src/components/chatbot/FlowBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, MessageSquare, ArrowRight, Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FlowNode {\n  id: string;\n  type: 'message' | 'question' | 'condition' | 'action';\n  content: string;\n  responses?: FlowResponse[];\n  nextNode?: string;\n  conditions?: FlowCondition[];\n  action?: string;\n}\n\ninterface FlowResponse {\n  id: string;\n  text: string;\n  nextNode?: string;\n}\n\ninterface FlowCondition {\n  id: string;\n  condition: string;\n  nextNode?: string;\n}\n\ninterface FlowBuilderProps {\n  chatbot: any;\n  onUpdate: (flows: any) => void;\n}\n\nexport default function FlowBuilder({ chatbot, onUpdate }: FlowBuilderProps) {\n  const { toast } = useToast();\n  const [flows, setFlows] = useState<FlowNode[]>(chatbot.flows?.nodes || []);\n  const [selectedNode, setSelectedNode] = useState<FlowNode | null>(null);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const getNodeTypeColor = (type: string) => {\n    switch (type) {\n      case 'message': return 'bg-blue-500/10 text-blue-400';\n      case 'question': return 'bg-green-500/10 text-green-400';\n      case 'condition': return 'bg-yellow-500/10 text-yellow-400';\n      case 'action': return 'bg-purple-500/10 text-purple-400';\n      default: return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const createNewNode = (type: FlowNode['type']) => {\n    const newNode: FlowNode = {\n      id: crypto.randomUUID(),\n      type,\n      content: '',\n      responses: type === 'question' ? [] : undefined,\n      conditions: type === 'condition' ? [] : undefined,\n      action: type === 'action' ? '' : undefined,\n    };\n\n    setFlows(prev => [...prev, newNode]);\n    setSelectedNode(newNode);\n    setIsEditing(true);\n  };\n\n  const updateNode = (nodeId: string, updates: Partial<FlowNode>) => {\n    setFlows(prev =>\n      prev.map(node => node.id === nodeId ? { ...node, ...updates } : node)\n    );\n    \n    if (selectedNode?.id === nodeId) {\n      setSelectedNode(prev => prev ? { ...prev, ...updates } : null);\n    }\n  };\n\n  const deleteNode = (nodeId: string) => {\n    setFlows(prev => prev.filter(node => node.id !== nodeId));\n    if (selectedNode?.id === nodeId) {\n      setSelectedNode(null);\n      setIsEditing(false);\n    }\n  };\n\n  const addResponse = (nodeId: string) => {\n    const newResponse: FlowResponse = {\n      id: crypto.randomUUID(),\n      text: '',\n      nextNode: undefined,\n    };\n\n    updateNode(nodeId, {\n      responses: [...(flows.find(n => n.id === nodeId)?.responses || []), newResponse]\n    });\n  };\n\n  const updateResponse = (nodeId: string, responseId: string, updates: Partial<FlowResponse>) => {\n    const node = flows.find(n => n.id === nodeId);\n    if (!node?.responses) return;\n\n    const updatedResponses = node.responses.map(resp =>\n      resp.id === responseId ? { ...resp, ...updates } : resp\n    );\n\n    updateNode(nodeId, { responses: updatedResponses });\n  };\n\n  const removeResponse = (nodeId: string, responseId: string) => {\n    const node = flows.find(n => n.id === nodeId);\n    if (!node?.responses) return;\n\n    const updatedResponses = node.responses.filter(resp => resp.id !== responseId);\n    updateNode(nodeId, { responses: updatedResponses });\n  };\n\n  const saveFlows = () => {\n    const flowData = {\n      nodes: flows,\n      startNode: flows[0]?.id || null,\n      version: Date.now()\n    };\n\n    onUpdate(flowData);\n    \n    toast({\n      title: \"Success\",\n      description: \"Conversation flows saved successfully\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Flow Builder Header */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-white\">Conversation Flow Builder</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Design conversation paths and responses for your chatbot\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                onClick={saveFlows}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save Flows\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              onClick={() => createNewNode('message')}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-blue-500/20 text-blue-400 hover:bg-blue-500/10\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Message\n            </Button>\n            <Button\n              onClick={() => createNewNode('question')}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-green-500/20 text-green-400 hover:bg-green-500/10\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Question\n            </Button>\n            <Button\n              onClick={() => createNewNode('condition')}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-yellow-500/20 text-yellow-400 hover:bg-yellow-500/10\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Condition\n            </Button>\n            <Button\n              onClick={() => createNewNode('action')}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-purple-500/20 text-purple-400 hover:bg-purple-500/10\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Action\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Flow Nodes List */}\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Flow Nodes</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Manage your conversation flow components\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {flows.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <MessageSquare className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400\">No flow nodes created yet</p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Add nodes to start building your conversation flow\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {flows.map((node, index) => (\n                  <div\n                    key={node.id}\n                    className={`p-4 rounded-lg border cursor-pointer transition-colors ${\n                      selectedNode?.id === node.id\n                        ? 'border-primary bg-primary/10'\n                        : 'border-gray-600 hover:border-gray-500 bg-gray-700'\n                    }`}\n                    onClick={() => {\n                      setSelectedNode(node);\n                      setIsEditing(false);\n                    }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm text-gray-400\">#{index + 1}</span>\n                          <Badge className={getNodeTypeColor(node.type)}>\n                            {node.type}\n                          </Badge>\n                        </div>\n                        <h4 className=\"font-medium text-white\">\n                          {node.content || `Untitled ${node.type}`}\n                        </h4>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setSelectedNode(node);\n                            setIsEditing(true);\n                          }}\n                          className=\"text-gray-400 hover:text-white\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            deleteNode(node.id);\n                          }}\n                          className=\"text-red-400 hover:text-red-300\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    {node.content && (\n                      <p className=\"text-sm text-gray-400 mt-2 truncate\">\n                        {node.content}\n                      </p>\n                    )}\n                    {node.responses && node.responses.length > 0 && (\n                      <div className=\"mt-2 flex items-center text-xs text-gray-500\">\n                        <ArrowRight className=\"w-3 h-3 mr-1\" />\n                        {node.responses.length} response(s)\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Node Editor */}\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">\n              {isEditing ? 'Edit Node' : 'Node Details'}\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              {selectedNode ? 'Configure the selected flow node' : 'Select a node to view details'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {!selectedNode ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-400\">Select a node to view or edit its details</p>\n              </div>\n            ) : isEditing ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"content\" className=\"text-white\">Content</Label>\n                  <Textarea\n                    id=\"content\"\n                    value={selectedNode.content}\n                    onChange={(e) => updateNode(selectedNode.id, { content: e.target.value })}\n                    placeholder={`Enter ${selectedNode.type} content...`}\n                    className=\"mt-1\"\n                    rows={3}\n                  />\n                </div>\n\n                {selectedNode.type === 'question' && (\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Label className=\"text-white\">Response Options</Label>\n                      <Button\n                        onClick={() => addResponse(selectedNode.id)}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-green-400 border-green-500/20 hover:bg-green-500/10\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Add Response\n                      </Button>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {selectedNode.responses?.map((response) => (\n                        <div key={response.id} className=\"flex items-center space-x-2\">\n                          <Input\n                            value={response.text}\n                            onChange={(e) => updateResponse(selectedNode.id, response.id, { text: e.target.value })}\n                            placeholder=\"Response text...\"\n                            className=\"flex-1\"\n                          />\n                          <Button\n                            onClick={() => removeResponse(selectedNode.id, response.id)}\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-red-400 hover:text-red-300\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {selectedNode.type === 'action' && (\n                  <div>\n                    <Label htmlFor=\"action\" className=\"text-white\">Action Type</Label>\n                    <Input\n                      id=\"action\"\n                      value={selectedNode.action || ''}\n                      onChange={(e) => updateNode(selectedNode.id, { action: e.target.value })}\n                      placeholder=\"e.g., schedule_appointment, capture_lead\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => setIsEditing(false)}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Save Changes\n                  </Button>\n                  <Button\n                    onClick={() => setIsEditing(false)}\n                    variant=\"outline\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-white\">Type</Label>\n                  <Badge className={`mt-1 ${getNodeTypeColor(selectedNode.type)}`}>\n                    {selectedNode.type}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-white\">Content</Label>\n                  <p className=\"mt-1 text-gray-300 bg-gray-700 p-3 rounded\">\n                    {selectedNode.content || 'No content specified'}\n                  </p>\n                </div>\n                {selectedNode.responses && selectedNode.responses.length > 0 && (\n                  <div>\n                    <Label className=\"text-white\">Response Options</Label>\n                    <div className=\"mt-1 space-y-2\">\n                      {selectedNode.responses.map((response) => (\n                        <div key={response.id} className=\"bg-gray-700 p-2 rounded text-sm text-gray-300\">\n                          {response.text || 'Untitled response'}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <Button\n                  onClick={() => setIsEditing(true)}\n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Node\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15665},"client/src/components/dashboard/AppointmentsTable.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { Calendar, Clock } from \"lucide-react\";\n\ninterface Appointment {\n  id: string;\n  title?: string;\n  scheduledAt?: string;\n  duration?: number;\n  status?: string;\n  leadId?: string;\n  serviceId?: string;\n}\n\ninterface AppointmentsTableProps {\n  appointments: Appointment[];\n  loading?: boolean;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status?.toLowerCase()) {\n    case 'scheduled':\n      return 'bg-blue-500/10 text-blue-400';\n    case 'confirmed':\n      return 'bg-green-500/10 text-green-400';\n    case 'completed':\n      return 'bg-purple-500/10 text-purple-400';\n    case 'cancelled':\n      return 'bg-red-500/10 text-red-400';\n    case 'no_show':\n      return 'bg-gray-500/10 text-gray-400';\n    default:\n      return 'bg-gray-500/10 text-gray-400';\n  }\n};\n\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n  const appointmentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  let dateLabel = '';\n  if (appointmentDate.getTime() === today.getTime()) {\n    dateLabel = 'Today';\n  } else if (appointmentDate.getTime() === tomorrow.getTime()) {\n    dateLabel = 'Tomorrow';\n  } else {\n    dateLabel = date.toLocaleDateString('en-US', { \n      weekday: 'short', \n      month: 'short', \n      day: 'numeric' \n    });\n  }\n\n  const timeLabel = date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n\n  return { dateLabel, timeLabel };\n};\n\nexport default function AppointmentsTable({ appointments, loading }: AppointmentsTableProps) {\n  if (loading) {\n    return (\n      <Card className=\"bg-surface border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white\">Upcoming Appointments</CardTitle>\n            <Skeleton className=\"h-8 w-24 bg-gray-700\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg border border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <Skeleton className=\"h-10 w-10 rounded-full bg-gray-700\" />\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                    <Skeleton className=\"h-3 w-24 bg-gray-700\" />\n                  </div>\n                </div>\n                <div className=\"text-right space-y-2\">\n                  <Skeleton className=\"h-4 w-16 bg-gray-700\" />\n                  <Skeleton className=\"h-3 w-12 bg-gray-700\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const upcomingAppointments = appointments\n    .filter(apt => new Date(apt.scheduledAt || '') > new Date())\n    .sort((a, b) => new Date(a.scheduledAt || '').getTime() - new Date(b.scheduledAt || '').getTime())\n    .slice(0, 4);\n\n  return (\n    <Card className=\"bg-surface border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Upcoming Appointments</CardTitle>\n          <Link href=\"/appointments\">\n            <Button variant=\"link\" className=\"text-primary hover:text-primary/80 p-0\">\n              View calendar\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {upcomingAppointments.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Calendar className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n            <p className=\"text-gray-400\">No upcoming appointments</p>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Appointments will appear here when scheduled through your chatbot\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {upcomingAppointments.map((appointment) => {\n              const { dateLabel, timeLabel } = formatDate(appointment.scheduledAt || '');\n              \n              return (\n                <div \n                  key={appointment.id} \n                  className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg border border-border hover:border-primary/50 transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <Calendar className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-white\">\n                        {appointment.title || 'Appointment'}\n                      </p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge className={getStatusColor(appointment.status || 'scheduled')}>\n                          {appointment.status || 'Scheduled'}\n                        </Badge>\n                        {appointment.duration && (\n                          <div className=\"flex items-center text-xs text-gray-400\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {appointment.duration}m\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-white\">{timeLabel}</p>\n                    <p className=\"text-xs text-gray-400\">{dateLabel}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6246},"client/src/components/dashboard/ChatbotPreview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { Bot, Edit, BarChart3, Zap, MessageSquare, TrendingUp } from \"lucide-react\";\n\ninterface Chatbot {\n  id: string;\n  name: string;\n  status: string;\n  isActive: boolean;\n  theme?: {\n    primaryColor?: string;\n    backgroundColor?: string;\n  };\n  welcomeMessage?: string;\n}\n\ninterface ChatbotPreviewProps {\n  chatbots: Chatbot[];\n  loading?: boolean;\n}\n\nexport default function ChatbotPreview({ chatbots, loading }: ChatbotPreviewProps) {\n  if (loading) {\n    return (\n      <Card className=\"bg-surface border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <Skeleton className=\"h-6 w-40 bg-gray-700\" />\n            <Skeleton className=\"h-9 w-32 bg-gray-700\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Skeleton className=\"h-96 bg-gray-700 rounded-lg\" />\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-32 bg-gray-700 rounded-lg\" />\n              <Skeleton className=\"h-32 bg-gray-700 rounded-lg\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const activeChatbot = chatbots.find(bot => bot.isActive) || chatbots[0];\n\n  if (!activeChatbot) {\n    return (\n      <Card className=\"bg-surface border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white\">Chatbot Preview</CardTitle>\n            <Link href=\"/chatbot-designer\">\n              <Button className=\"bg-primary hover:bg-primary/90 text-white\">\n                Create Chatbot\n              </Button>\n            </Link>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <Bot className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-white mb-2\">No Chatbot Found</h3>\n            <p className=\"text-gray-400 mb-6\">\n              Create your first chatbot to start engaging with customers\n            </p>\n            <Link href=\"/chatbot-designer\">\n              <Button className=\"bg-primary hover:bg-primary/90 text-white\">\n                Get Started\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-surface border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <CardTitle className=\"text-white\">Chatbot Preview</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n              <span className=\"text-sm text-gray-400\">\n                {activeChatbot.isActive ? 'Live on website' : 'Inactive'}\n              </span>\n            </div>\n          </div>\n          <Link href=\"/chatbot-designer\">\n            <Button className=\"bg-primary hover:bg-primary/90 text-white\">\n              Edit Chatbot\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Chatbot Widget Preview */}\n          <div className=\"relative\">\n            <div className=\"bg-gray-900 rounded-lg p-4 min-h-96\">\n              {/* Website mockup */}\n              <div className=\"bg-white rounded-t-lg p-4 h-64\">\n                <div className=\"w-full h-32 bg-gradient-to-r from-blue-500 to-purple-600 rounded mb-2\"></div>\n                <h2 className=\"text-gray-900 text-lg font-bold\">Professional Services</h2>\n                <p className=\"text-gray-600 text-sm\">We help businesses grow with expert consulting...</p>\n              </div>\n              \n              {/* Chatbot Widget */}\n              <div className=\"absolute bottom-6 right-6 w-80 bg-white rounded-lg shadow-2xl border\">\n                <div \n                  className=\"text-white p-4 rounded-t-lg flex items-center justify-between\"\n                  style={{ backgroundColor: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                      <Bot className=\"w-4 h-4\" />\n                    </div>\n                    <span className=\"font-medium\">{activeChatbot.name}</span>\n                  </div>\n                  <button className=\"text-white/80 hover:text-white\">\n                    ×\n                  </button>\n                </div>\n                <div className=\"p-4 h-64 overflow-y-auto bg-gray-50\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-2\">\n                      <div \n                        className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0\"\n                        style={{ backgroundColor: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                      >\n                        <Bot className=\"w-3 h-3 text-white\" />\n                      </div>\n                      <div className=\"bg-white p-3 rounded-lg shadow-sm max-w-xs\">\n                        <p className=\"text-sm text-gray-800\">\n                          {activeChatbot.welcomeMessage || \"Hi! How can I help you today?\"}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-end\">\n                      <div \n                        className=\"text-white p-3 rounded-lg max-w-xs\"\n                        style={{ backgroundColor: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                      >\n                        <p className=\"text-sm\">I'd like to know more about your services</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div \n                        className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0\"\n                        style={{ backgroundColor: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                      >\n                        <Bot className=\"w-3 h-3 text-white\" />\n                      </div>\n                      <div className=\"bg-white p-3 rounded-lg shadow-sm max-w-xs\">\n                        <p className=\"text-sm text-gray-800\">\n                          Great! We offer strategic business consulting and digital transformation. \n                          Would you like to schedule a consultation?\n                        </p>\n                        <div className=\"mt-2 space-y-1\">\n                          <button \n                            className=\"w-full text-left p-2 rounded text-sm hover:bg-gray-100 transition-colors\"\n                            style={{ color: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                          >\n                            📅 Schedule consultation\n                          </button>\n                          <button \n                            className=\"w-full text-left p-2 rounded text-sm hover:bg-gray-100 transition-colors\"\n                            style={{ color: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                          >\n                            📄 View our services\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"p-3 border-t border-gray-200\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input \n                      type=\"text\" \n                      placeholder=\"Type your message...\" \n                      className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2\"\n                      style={{ \n                        focusRingColor: activeChatbot.theme?.primaryColor || '#6366F1'\n                      }}\n                    />\n                    <button \n                      className=\"text-white p-2 rounded-lg hover:opacity-90 transition-opacity\"\n                      style={{ backgroundColor: activeChatbot.theme?.primaryColor || '#6366F1' }}\n                    >\n                      <MessageSquare className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Chatbot Analytics */}\n          <div className=\"space-y-6\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-400 mb-3\">Today's Performance</h4>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"bg-gray-800/50 p-4 rounded-lg border border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold text-white\">147</p>\n                      <p className=\"text-xs text-gray-400\">Conversations</p>\n                    </div>\n                    <MessageSquare className=\"w-8 h-8 text-primary\" />\n                  </div>\n                </div>\n                <div className=\"bg-gray-800/50 p-4 rounded-lg border border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold text-white\">98.5%</p>\n                      <p className=\"text-xs text-gray-400\">Response Rate</p>\n                    </div>\n                    <TrendingUp className=\"w-8 h-8 text-success\" />\n                  </div>\n                </div>\n                <div className=\"bg-gray-800/50 p-4 rounded-lg border border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold text-white\">4.8</p>\n                      <p className=\"text-xs text-gray-400\">Satisfaction</p>\n                    </div>\n                    <div className=\"text-warning\">⭐</div>\n                  </div>\n                </div>\n                <div className=\"bg-gray-800/50 p-4 rounded-lg border border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold text-white\">23</p>\n                      <p className=\"text-xs text-gray-400\">Conversions</p>\n                    </div>\n                    <div className=\"w-8 h-8 rounded-full bg-accent/10 flex items-center justify-center\">\n                      <span className=\"text-accent\">🎯</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-400 mb-3\">Quick Actions</h4>\n              <div className=\"space-y-2\">\n                <Button \n                  variant=\"ghost\"\n                  className=\"w-full bg-primary/10 hover:bg-primary/20 text-primary justify-start\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Welcome Message\n                </Button>\n                <Button \n                  variant=\"ghost\"\n                  className=\"w-full bg-secondary/10 hover:bg-secondary/20 text-secondary justify-start\"\n                >\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Train with New Content\n                </Button>\n                <Button \n                  variant=\"ghost\"\n                  className=\"w-full bg-accent/10 hover:bg-accent/20 text-accent justify-start\"\n                >\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  View Detailed Analytics\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12321},"client/src/components/dashboard/ConversationsChart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function ConversationsChart() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n    canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\n\n    // Mock data for conversations chart\n    const data = [120, 190, 300, 500, 200, 300, 450];\n    const labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    \n    const maxValue = Math.max(...data);\n    const padding = 40;\n    const chartWidth = canvas.offsetWidth - padding * 2;\n    const chartHeight = canvas.offsetHeight - padding * 2;\n\n    // Draw grid lines\n    ctx.strokeStyle = '#374151';\n    ctx.lineWidth = 1;\n    \n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (chartHeight / 5) * i;\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(canvas.offsetWidth - padding, y);\n      ctx.stroke();\n    }\n\n    // Draw line chart\n    ctx.strokeStyle = '#6366F1';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n\n    data.forEach((value, index) => {\n      const x = padding + (chartWidth / (data.length - 1)) * index;\n      const y = padding + chartHeight - (value / maxValue) * chartHeight;\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n\n      // Draw points\n      ctx.fillStyle = '#6366F1';\n      ctx.beginPath();\n      ctx.arc(x, y, 4, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n\n    ctx.stroke();\n\n    // Draw labels\n    ctx.fillStyle = '#9CA3AF';\n    ctx.font = '12px Inter';\n    ctx.textAlign = 'center';\n\n    labels.forEach((label, index) => {\n      const x = padding + (chartWidth / (labels.length - 1)) * index;\n      ctx.fillText(label, x, canvas.offsetHeight - 10);\n    });\n\n  }, []);\n\n  return (\n    <Card className=\"bg-surface border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-white\">Conversation Analytics</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Track your chatbot performance over time\n            </CardDescription>\n          </div>\n          <Select defaultValue=\"7days\">\n            <SelectTrigger className=\"w-40 bg-gray-700 border-border text-white\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-surface border-border\">\n              <SelectItem value=\"7days\">Last 7 days</SelectItem>\n              <SelectItem value=\"30days\">Last 30 days</SelectItem>\n              <SelectItem value=\"90days\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80 relative\">\n          <canvas \n            ref={canvasRef}\n            className=\"w-full h-full\"\n            style={{ width: '100%', height: '100%' }}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3483},"client/src/components/dashboard/LeadsTable.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\n\ninterface Lead {\n  id: string;\n  name?: string;\n  email?: string;\n  source?: string;\n  score?: number;\n  status?: string;\n  createdAt?: string;\n}\n\ninterface LeadsTableProps {\n  leads: Lead[];\n  loading?: boolean;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status?.toLowerCase()) {\n    case 'new':\n      return 'bg-blue-500/10 text-blue-400';\n    case 'contacted':\n      return 'bg-yellow-500/10 text-yellow-400';\n    case 'qualified':\n      return 'bg-green-500/10 text-green-400';\n    case 'converted':\n      return 'bg-purple-500/10 text-purple-400';\n    case 'lost':\n      return 'bg-red-500/10 text-red-400';\n    default:\n      return 'bg-gray-500/10 text-gray-400';\n  }\n};\n\nconst getScoreColor = (score: number) => {\n  if (score >= 80) return 'bg-success/10 text-success';\n  if (score >= 60) return 'bg-warning/10 text-warning';\n  return 'bg-gray-500/10 text-gray-400';\n};\n\nexport default function LeadsTable({ leads, loading }: LeadsTableProps) {\n  if (loading) {\n    return (\n      <Card className=\"bg-surface border-border\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white\">Recent Leads</CardTitle>\n            <Skeleton className=\"h-8 w-20 bg-gray-700\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <Skeleton className=\"h-10 w-10 rounded-full bg-gray-700\" />\n                <div className=\"flex-1 space-y-2\">\n                  <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                  <Skeleton className=\"h-3 w-24 bg-gray-700\" />\n                </div>\n                <Skeleton className=\"h-6 w-16 bg-gray-700\" />\n                <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-surface border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Recent Leads</CardTitle>\n          <Link href=\"/leads\">\n            <Button variant=\"link\" className=\"text-primary hover:text-primary/80 p-0\">\n              View all leads\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {leads.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-400\">No leads found</p>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Leads will appear here once your chatbot starts capturing them\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider pb-3\">\n                    Contact\n                  </th>\n                  <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider pb-3\">\n                    Source\n                  </th>\n                  <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider pb-3\">\n                    Score\n                  </th>\n                  <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider pb-3\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {leads.slice(0, 5).map((lead) => (\n                  <tr key={lead.id}>\n                    <td className=\"py-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"h-8 w-8 rounded-full bg-gray-600 flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-white\">\n                            {lead.name?.charAt(0) || lead.email?.charAt(0) || '?'}\n                          </span>\n                        </div>\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-white\">\n                            {lead.name || 'Anonymous'}\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            {lead.email || 'No email'}\n                          </p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4\">\n                      <span className=\"text-sm text-gray-300\">\n                        {lead.source || 'Unknown'}\n                      </span>\n                    </td>\n                    <td className=\"py-4\">\n                      <Badge className={getScoreColor(lead.score || 0)}>\n                        {lead.score || 0}\n                      </Badge>\n                    </td>\n                    <td className=\"py-4\">\n                      <Badge className={getStatusColor(lead.status || 'new')}>\n                        {lead.status || 'New'}\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5675},"client/src/components/dashboard/RecentActivity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst activities = [\n  {\n    id: 1,\n    type: \"lead\",\n    message: \"New lead captured from website\",\n    time: \"2 minutes ago\",\n    color: \"bg-primary\"\n  },\n  {\n    id: 2,\n    type: \"appointment\",\n    message: \"Appointment scheduled via chatbot\",\n    time: \"5 minutes ago\",\n    color: \"bg-success\"\n  },\n  {\n    id: 3,\n    type: \"training\",\n    message: \"AI training completed for new content\",\n    time: \"12 minutes ago\",\n    color: \"bg-accent\"\n  },\n  {\n    id: 4,\n    type: \"inquiry\",\n    message: \"Customer inquiry about pricing\",\n    time: \"15 minutes ago\",\n    color: \"bg-warning\"\n  },\n  {\n    id: 5,\n    type: \"publish\",\n    message: \"New chatbot flow published\",\n    time: \"1 hour ago\",\n    color: \"bg-secondary\"\n  },\n];\n\nexport default function RecentActivity() {\n  return (\n    <Card className=\"bg-surface border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Recent Activity</CardTitle>\n          <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary\">\n            Live\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity) => (\n            <div key={activity.id} className=\"flex items-start space-x-3\">\n              <div className={`w-2 h-2 ${activity.color} rounded-full mt-2 flex-shrink-0`}></div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm text-white\">{activity.message}</p>\n                <p className=\"text-xs text-gray-400\">{activity.time}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n        <Button \n          variant=\"link\" \n          className=\"w-full mt-4 text-primary hover:text-primary/80 p-0\"\n        >\n          View all activity\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2052},"client/src/components/dashboard/StatsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { LucideIcon, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  change?: number;\n  loading?: boolean;\n  className?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  icon: Icon, \n  change, \n  loading, \n  className \n}: StatsCardProps) {\n  if (loading) {\n    return (\n      <Card className=\"bg-surface border-border hover:border-primary/50 transition-colors\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <Skeleton className=\"w-12 h-12 rounded-lg bg-gray-700\" />\n            <div className=\"ml-4 space-y-2\">\n              <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n              <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <Skeleton className=\"h-4 w-24 bg-gray-700\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const isPositive = change ? change > 0 : false;\n  const TrendIcon = isPositive ? TrendingUp : TrendingDown;\n\n  return (\n    <Card className={cn(\n      \"bg-surface border-border hover:border-primary/50 transition-colors hover-glow\",\n      className\n    )}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            <Icon className=\"text-primary w-6 h-6\" />\n          </div>\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-400\">{title}</p>\n            <p className=\"text-2xl font-bold text-white\">{value}</p>\n          </div>\n        </div>\n        {change !== undefined && (\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className={cn(\n              \"flex items-center\",\n              isPositive ? \"text-success\" : \"text-error\"\n            )}>\n              <TrendIcon className=\"w-4 h-4 mr-1\" />\n              {Math.abs(change)}%\n            </span>\n            <span className=\"text-gray-400 ml-2\">vs last month</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2286},"client/src/components/layout/DashboardLayout.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport Sidebar from \"./Sidebar\";\nimport TopNavbar from \"./TopNavbar\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n}\n\nexport default function DashboardLayout({ \n  children, \n  title = \"Dashboard\", \n  description \n}: DashboardLayoutProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-dark\">\n      {/* Desktop Sidebar */}\n      <Sidebar />\n      \n      {/* Mobile Sidebar */}\n      {isMobileMenuOpen && (\n        <div className=\"fixed inset-0 z-50 lg:hidden\">\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" onClick={toggleMobileMenu}></div>\n          <div className=\"fixed top-0 left-0 h-full w-64 bg-surface border-r border-border z-50\">\n            <Sidebar />\n          </div>\n        </div>\n      )}\n      \n      {/* Main Content */}\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <TopNavbar \n          title={title} \n          description={description}\n          onMobileMenuToggle={toggleMobileMenu} \n        />\n        \n        <main className=\"flex-1 overflow-y-auto bg-dark p-6\">\n          <div className=\"animate-fade-in\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1462},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  Bot, \n  Calendar, \n  Package, \n  Palette, \n  Settings, \n  Users, \n  MessageSquare, \n  Brain,\n  Building2,\n  CreditCard,\n  Shield,\n  PieChart\n} from \"lucide-react\";\n\nconst businessNavItems = [\n  { href: \"/\", icon: BarChart3, label: \"Dashboard\" },\n  { href: \"/chatbot-designer\", icon: Palette, label: \"Chatbot Designer\" },\n  { href: \"/leads\", icon: Users, label: \"Leads Management\" },\n  { href: \"/appointments\", icon: Calendar, label: \"Appointments\" },\n  { href: \"/products\", icon: Package, label: \"Products & Services\" },\n  { href: \"/qa-management\", icon: MessageSquare, label: \"Q&A Management\" },\n  { href: \"/ai-training\", icon: Brain, label: \"AI Training\" },\n  { href: \"/settings\", icon: Settings, label: \"Settings\" },\n];\n\nconst superAdminNavItems = [\n  { href: \"/\", icon: PieChart, label: \"Platform Overview\" },\n  { href: \"/tenants\", icon: Building2, label: \"Tenant Management\" },\n  { href: \"/billing\", icon: CreditCard, label: \"Billing & Subscriptions\" },\n  { href: \"/settings\", icon: Shield, label: \"Platform Settings\" },\n];\n\nexport default function Sidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  \n  const navItems = user?.role === 'superadmin' ? superAdminNavItems : businessNavItems;\n\n  return (\n    <div className=\"hidden lg:flex lg:flex-shrink-0\">\n      <div className=\"flex flex-col w-64\">\n        <div className=\"flex flex-col flex-grow bg-surface border-r border-border overflow-y-auto\">\n          \n          {/* Logo */}\n          <div className=\"flex items-center flex-shrink-0 px-6 py-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Bot className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"ml-3 text-xl font-bold text-white\">\n                {user?.role === 'superadmin' ? 'Admin Portal' : 'ChatBot Pro'}\n              </span>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 pb-4 space-y-1\">\n            {navItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href} className={cn(\n                  \"group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\",\n                  isActive\n                    ? \"bg-primary/10 text-primary border-r-2 border-primary\"\n                    : \"text-gray-300 hover:bg-gray-700 hover:text-white\"\n                )}>\n                  <item.icon className=\"mr-3 w-5 h-5\" />\n                  {item.label}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Profile */}\n          <div className=\"flex-shrink-0 p-4\">\n            <div className=\"flex items-center\">\n              <img \n                className=\"inline-block h-10 w-10 rounded-full object-cover\" \n                src={user?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"} \n                alt=\"Profile\" \n              />\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-white\">\n                  {user?.firstName && user?.lastName \n                    ? `${user.firstName} ${user.lastName}` \n                    : user?.email || 'User'\n                  }\n                </p>\n                <p className=\"text-xs font-medium text-gray-400\">\n                  {user?.role === 'superadmin' ? 'Super Admin' : 'Business Admin'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3843},"client/src/components/layout/TopNavbar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Menu, Bell, Moon, Sun, LogOut } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface TopNavbarProps {\n  title: string;\n  description?: string;\n  onMobileMenuToggle?: () => void;\n}\n\nexport default function TopNavbar({ title, description, onMobileMenuToggle }: TopNavbarProps) {\n  const { user } = useAuth();\n  const [isDark, setIsDark] = useState(true);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    // Theme switching logic would go here\n    // For now, we'll keep it dark as per design\n  };\n\n  return (\n    <header className=\"bg-surface border-b border-border\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"lg:hidden mr-3 text-gray-400 hover:text-white\"\n            onClick={onMobileMenuToggle}\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">{title}</h1>\n            {description && (\n              <p className=\"text-sm text-gray-400 mt-1\">{description}</p>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"p-2 text-gray-400 hover:text-white rounded-lg hover:bg-gray-700\"\n          >\n            {isDark ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </Button>\n          \n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2 text-gray-400 hover:text-white rounded-lg hover:bg-gray-700 relative\"\n          >\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute top-1 right-1 w-2 h-2 bg-error rounded-full\"></span>\n          </Button>\n          \n          {/* Profile Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                <img\n                  className=\"h-8 w-8 rounded-full object-cover\"\n                  src={user?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"}\n                  alt=\"Profile\"\n                />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56 bg-surface border-border\" align=\"end\" forceMount>\n              <div className=\"flex flex-col space-y-1 p-2\">\n                <p className=\"text-sm font-medium text-white\">\n                  {user?.firstName && user?.lastName \n                    ? `${user.firstName} ${user.lastName}` \n                    : user?.email || 'User'\n                  }\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  {user?.email}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {user?.role === 'superadmin' ? 'Super Administrator' : 'Business Administrator'}\n                </p>\n              </div>\n              <DropdownMenuSeparator className=\"bg-border\" />\n              <DropdownMenuItem \n                onClick={handleLogout}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700 cursor-pointer\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4044},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/business/ai-training.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Brain, Globe, Plus, Download, Zap, CheckCircle, AlertCircle, Clock, FileText, Trash2, RefreshCw } from \"lucide-react\";\n\nexport default function AITraining() {\n  const { toast } = useToast();\n  const [selectedChatbot, setSelectedChatbot] = useState<string>(\"\");\n  const [selectedContent, setSelectedContent] = useState<string[]>([]);\n  const [isTraining, setIsTraining] = useState(false);\n  const [trainingProgress, setTrainingProgress] = useState(0);\n  const [isScrapeDialogOpen, setIsScrapeDialogOpen] = useState(false);\n  const [scrapeUrl, setScrapeUrl] = useState(\"\");\n\n  const { data: chatbots, isLoading: chatbotsLoading } = useQuery({\n    queryKey: [\"/api/chatbots\"],\n    retry: false,\n  });\n\n  const { data: websiteContent, isLoading: contentLoading } = useQuery({\n    queryKey: [\"/api/website-content\"],\n    retry: false,\n  });\n\n  const scrapeWebsiteMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/ai/scrape-website\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/website-content\"] });\n      toast({\n        title: \"Success\",\n        description: \"Website content scraped successfully\",\n      });\n      setIsScrapeDialogOpen(false);\n      setScrapeUrl(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to scrape website content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const trainAIMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/ai/train\", data);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chatbots\"] });\n      toast({\n        title: \"Success\",\n        description: \"AI training completed successfully\",\n      });\n      setIsTraining(false);\n      setTrainingProgress(0);\n      setSelectedContent([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to train AI\",\n        variant: \"destructive\",\n      });\n      setIsTraining(false);\n      setTrainingProgress(0);\n    },\n  });\n\n  const deleteContentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/website-content/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/website-content\"] });\n      toast({\n        title: \"Success\",\n        description: \"Content deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const contentStats = {\n    total: websiteContent?.length || 0,\n    active: websiteContent?.filter((c: any) => c.isActive).length || 0,\n    totalWords: websiteContent?.reduce((sum: number, content: any) => \n      sum + (content.content?.split(' ').length || 0), 0) || 0,\n    avgWords: websiteContent?.length ? \n      Math.round((websiteContent.reduce((sum: number, content: any) => \n        sum + (content.content?.split(' ').length || 0), 0) / websiteContent.length)) : 0\n  };\n\n  const handleScrapeWebsite = () => {\n    if (!scrapeUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      new URL(scrapeUrl);\n    } catch {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    scrapeWebsiteMutation.mutate({ url: scrapeUrl });\n  };\n\n  const handleTrainAI = () => {\n    if (!selectedChatbot) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a chatbot to train\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTraining(true);\n    setTrainingProgress(0);\n\n    // Simulate training progress\n    const progressInterval = setInterval(() => {\n      setTrainingProgress(prev => {\n        if (prev >= 90) {\n          clearInterval(progressInterval);\n          return prev;\n        }\n        return prev + Math.random() * 10;\n      });\n    }, 500);\n\n    trainAIMutation.mutate({\n      chatbotId: selectedChatbot,\n      contentIds: selectedContent\n    });\n  };\n\n  const handleSelectAllContent = (checked: boolean) => {\n    if (checked) {\n      setSelectedContent(websiteContent?.map((c: any) => c.id) || []);\n    } else {\n      setSelectedContent([]);\n    }\n  };\n\n  const handleSelectContent = (contentId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedContent(prev => [...prev, contentId]);\n    } else {\n      setSelectedContent(prev => prev.filter(id => id !== contentId));\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"AI Training\" description=\"Train your chatbot with website content and knowledge\">\n      <div className=\"space-y-6\">\n        {/* Training Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <FileText className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Content Pages</p>\n                  <p className=\"text-2xl font-bold text-white\">{contentStats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <CheckCircle className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Active Content</p>\n                  <p className=\"text-2xl font-bold text-white\">{contentStats.active}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <Brain className=\"text-accent w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Words</p>\n                  <p className=\"text-2xl font-bold text-white\">{contentStats.totalWords.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <Globe className=\"text-secondary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Avg. Words/Page</p>\n                  <p className=\"text-2xl font-bold text-white\">{contentStats.avgWords}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* AI Training Section */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Brain className=\"w-5 h-5 mr-2\" />\n              AI Training Center\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Train your chatbot with scraped content and improve its responses\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Training Configuration */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-white\">Select Chatbot</Label>\n                  <Select value={selectedChatbot} onValueChange={setSelectedChatbot}>\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue placeholder=\"Choose a chatbot to train\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-surface border-border\">\n                      {chatbots?.map((chatbot: any) => (\n                        <SelectItem key={chatbot.id} value={chatbot.id}>\n                          {chatbot.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-end\">\n                  <Button\n                    onClick={handleTrainAI}\n                    disabled={!selectedChatbot || selectedContent.length === 0 || isTraining || trainAIMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90 w-full\"\n                  >\n                    {isTraining || trainAIMutation.isPending ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Training AI...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"w-4 h-4 mr-2\" />\n                        Start Training\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Training Progress */}\n              {(isTraining || trainAIMutation.isPending) && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-white\">Training Progress</Label>\n                    <span className=\"text-sm text-gray-400\">{Math.round(trainingProgress)}%</span>\n                  </div>\n                  <Progress value={trainingProgress} className=\"w-full\" />\n                  <p className=\"text-sm text-gray-400\">\n                    Processing content and updating AI knowledge base...\n                  </p>\n                </div>\n              )}\n\n              {/* Content Selection */}\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Label className=\"text-white\">Select Content for Training</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"select-all\"\n                      checked={websiteContent?.length > 0 && selectedContent.length === websiteContent.length}\n                      onCheckedChange={handleSelectAllContent}\n                    />\n                    <Label htmlFor=\"select-all\" className=\"text-sm text-gray-400\">\n                      Select All ({websiteContent?.length || 0})\n                    </Label>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-400 mb-4\">\n                  Selected: {selectedContent.length} / {websiteContent?.length || 0} content items\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Website Content Scraping */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Globe className=\"w-5 h-5 mr-2\" />\n                  Website Content\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Scrape and manage content from your website\n                </CardDescription>\n              </div>\n              <Dialog open={isScrapeDialogOpen} onOpenChange={setIsScrapeDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-accent hover:bg-accent/90\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Scrape Website\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-surface border-border\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-white\">Scrape Website Content</DialogTitle>\n                    <DialogDescription className=\"text-gray-400\">\n                      Enter a URL to scrape content for AI training\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"url\" className=\"text-white\">Website URL</Label>\n                      <Input\n                        id=\"url\"\n                        type=\"url\"\n                        value={scrapeUrl}\n                        onChange={(e) => setScrapeUrl(e.target.value)}\n                        placeholder=\"https://example.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-4\">\n                      <Button \n                        onClick={handleScrapeWebsite}\n                        disabled={scrapeWebsiteMutation.isPending}\n                        className=\"bg-accent hover:bg-accent/90\"\n                      >\n                        {scrapeWebsiteMutation.isPending ? (\n                          <>\n                            <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                            Scraping...\n                          </>\n                        ) : (\n                          <>\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Scrape Content\n                          </>\n                        )}\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsScrapeDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {contentLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <Card key={i} className=\"bg-gray-800/50 border-border\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Skeleton className=\"h-4 w-4 bg-gray-700\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <Skeleton className=\"h-5 w-3/4 bg-gray-700\" />\n                          <Skeleton className=\"h-4 w-1/2 bg-gray-700\" />\n                          <Skeleton className=\"h-3 w-full bg-gray-700\" />\n                        </div>\n                        <Skeleton className=\"h-6 w-16 bg-gray-700\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : websiteContent?.length === 0 ? (\n              <Card className=\"bg-gray-800/50 border-border\">\n                <CardContent className=\"text-center py-12\">\n                  <Globe className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No Content Found</h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    Scrape your website content to start training your AI chatbot\n                  </p>\n                  <Button \n                    onClick={() => setIsScrapeDialogOpen(true)}\n                    className=\"bg-accent hover:bg-accent/90\"\n                  >\n                    Scrape First Page\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {websiteContent?.map((content: any) => (\n                  <Card key={content.id} className=\"bg-gray-800/50 border-border hover:border-primary/50 transition-colors\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Checkbox\n                          checked={selectedContent.includes(content.id)}\n                          onCheckedChange={(checked) => handleSelectContent(content.id, checked as boolean)}\n                          className=\"mt-1\"\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium text-white\">{content.title || 'Untitled Page'}</h4>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant={content.isActive ? \"default\" : \"secondary\"}>\n                                {content.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => deleteContentMutation.mutate(content.id)}\n                                className=\"text-red-400 hover:text-red-300\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-gray-400 mb-2\">{content.url}</p>\n                          <p className=\"text-sm text-gray-300 line-clamp-2 mb-2\">\n                            {content.content?.substring(0, 200)}...\n                          </p>\n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <div className=\"flex items-center space-x-4\">\n                              <span>{content.content?.split(' ').length || 0} words</span>\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-3 h-3 mr-1\" />\n                                {formatDate(content.extractedAt)}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":20160},"client/src/pages/business/appointments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Calendar, Plus, Clock, MapPin, User, Video, CheckCircle, XCircle, AlertCircle, MoreHorizontal, Edit, Trash2 } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function BusinessAppointments() {\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newAppointmentData, setNewAppointmentData] = useState({\n    title: '',\n    description: '',\n    scheduledAt: '',\n    duration: 30,\n    serviceId: '',\n    meetingLink: ''\n  });\n\n  const { data: appointments, isLoading: appointmentsLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n    retry: false,\n  });\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n    retry: false,\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/appointments\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewAppointmentData({\n        title: '',\n        description: '',\n        scheduledAt: '',\n        duration: 30,\n        serviceId: '',\n        meetingLink: ''\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/appointments/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Appointment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'scheduled':\n        return 'bg-blue-500/10 text-blue-400';\n      case 'confirmed':\n        return 'bg-green-500/10 text-green-400';\n      case 'completed':\n        return 'bg-purple-500/10 text-purple-400';\n      case 'cancelled':\n        return 'bg-red-500/10 text-red-400';\n      case 'no_show':\n        return 'bg-gray-500/10 text-gray-400';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'confirmed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return {\n      date: date.toLocaleDateString(),\n      time: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    };\n  };\n\n  const filteredAppointments = appointments?.filter((appointment: any) => {\n    const appointmentDate = new Date(appointment.scheduledAt).toISOString().split('T')[0];\n    const matchesDate = !selectedDate || appointmentDate === selectedDate;\n    const matchesStatus = statusFilter === 'all' || appointment.status === statusFilter;\n    return matchesDate && matchesStatus;\n  }) || [];\n\n  const upcomingAppointments = appointments?.filter((apt: any) => \n    new Date(apt.scheduledAt) > new Date() && apt.status !== 'cancelled'\n  ) || [];\n\n  const appointmentStats = {\n    total: appointments?.length || 0,\n    upcoming: upcomingAppointments.length,\n    completed: appointments?.filter((a: any) => a.status === 'completed').length || 0,\n    cancelled: appointments?.filter((a: any) => a.status === 'cancelled').length || 0,\n  };\n\n  const handleCreateAppointment = () => {\n    if (!newAppointmentData.title.trim() || !newAppointmentData.scheduledAt) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide title and scheduled time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAppointmentMutation.mutate({\n      ...newAppointmentData,\n      scheduledAt: new Date(newAppointmentData.scheduledAt).toISOString()\n    });\n  };\n\n  const handleUpdateStatus = (appointmentId: string, status: string) => {\n    updateAppointmentMutation.mutate({\n      id: appointmentId,\n      data: { status }\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Appointment Management\" description=\"Schedule and manage appointments with your customers\">\n      <div className=\"space-y-6\">\n        {/* Appointment Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Calendar className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Appointments</p>\n                  <p className=\"text-2xl font-bold text-white\">{appointmentStats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n                  <Clock className=\"text-blue-400 w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Upcoming</p>\n                  <p className=\"text-2xl font-bold text-white\">{appointmentStats.upcoming}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <CheckCircle className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Completed</p>\n                  <p className=\"text-2xl font-bold text-white\">{appointmentStats.completed}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-error/10 rounded-lg\">\n                  <XCircle className=\"text-error w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Cancelled</p>\n                  <p className=\"text-2xl font-bold text-white\">{appointmentStats.cancelled}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Calendar View */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">Appointment Calendar</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  View and manage your appointment schedule\n                </CardDescription>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Label className=\"text-white\">Date:</Label>\n                  <Input\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    className=\"w-40\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue placeholder=\"Filter status\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-surface border-border\">\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                    <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    <SelectItem value=\"no_show\">No Show</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-primary hover:bg-primary/90\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Book Appointment\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"bg-surface border-border max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle className=\"text-white\">Book New Appointment</DialogTitle>\n                      <DialogDescription className=\"text-gray-400\">\n                        Schedule a new appointment with a customer\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"title\" className=\"text-white\">Title</Label>\n                          <Input\n                            id=\"title\"\n                            value={newAppointmentData.title}\n                            onChange={(e) => setNewAppointmentData(prev => ({ ...prev, title: e.target.value }))}\n                            placeholder=\"Appointment title\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"service\" className=\"text-white\">Service</Label>\n                          <Select \n                            value={newAppointmentData.serviceId}\n                            onValueChange={(value) => setNewAppointmentData(prev => ({ ...prev, serviceId: value }))}\n                          >\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue placeholder=\"Select service\" />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-surface border-border\">\n                              {services?.map((service: any) => (\n                                <SelectItem key={service.id} value={service.id}>\n                                  {service.name} ({service.duration}min)\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"scheduledAt\" className=\"text-white\">Date & Time</Label>\n                          <Input\n                            id=\"scheduledAt\"\n                            type=\"datetime-local\"\n                            value={newAppointmentData.scheduledAt}\n                            onChange={(e) => setNewAppointmentData(prev => ({ ...prev, scheduledAt: e.target.value }))}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"duration\" className=\"text-white\">Duration (minutes)</Label>\n                          <Input\n                            id=\"duration\"\n                            type=\"number\"\n                            min=\"15\"\n                            max=\"180\"\n                            value={newAppointmentData.duration}\n                            onChange={(e) => setNewAppointmentData(prev => ({ ...prev, duration: parseInt(e.target.value) || 30 }))}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"meetingLink\" className=\"text-white\">Meeting Link (optional)</Label>\n                        <Input\n                          id=\"meetingLink\"\n                          type=\"url\"\n                          value={newAppointmentData.meetingLink}\n                          onChange={(e) => setNewAppointmentData(prev => ({ ...prev, meetingLink: e.target.value }))}\n                          placeholder=\"https://zoom.us/j/...\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"description\" className=\"text-white\">Description</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={newAppointmentData.description}\n                          onChange={(e) => setNewAppointmentData(prev => ({ ...prev, description: e.target.value }))}\n                          placeholder=\"Appointment details...\"\n                          className=\"mt-1\"\n                          rows={3}\n                        />\n                      </div>\n                      <div className=\"flex items-center space-x-2 pt-4\">\n                        <Button \n                          onClick={handleCreateAppointment}\n                          disabled={createAppointmentMutation.isPending}\n                          className=\"bg-primary hover:bg-primary/90\"\n                        >\n                          Book Appointment\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setIsCreateDialogOpen(false)}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Appointments List */}\n            <div className=\"space-y-4\">\n              {appointmentsLoading ? (\n                [...Array(5)].map((_, i) => (\n                  <Card key={i} className=\"bg-gray-800/50 border-border\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Skeleton className=\"h-10 w-10 rounded-full bg-gray-700\" />\n                          <div className=\"space-y-2\">\n                            <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                            <Skeleton className=\"h-3 w-24 bg-gray-700\" />\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-4 w-20 bg-gray-700\" />\n                          <Skeleton className=\"h-6 w-16 bg-gray-700\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : filteredAppointments.length === 0 ? (\n                <Card className=\"bg-gray-800/50 border-border\">\n                  <CardContent className=\"text-center py-12\">\n                    <Calendar className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">No appointments found</p>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      {selectedDate ? `No appointments on ${new Date(selectedDate).toLocaleDateString()}` : 'Try selecting a different date'}\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                filteredAppointments.map((appointment: any) => {\n                  const { date, time } = formatDate(appointment.scheduledAt);\n                  return (\n                    <Card key={appointment.id} className=\"bg-gray-800/50 border-border hover:border-primary/50 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Calendar className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-white\">{appointment.title}</h4>\n                              <div className=\"flex items-center space-x-4 mt-1\">\n                                <div className=\"flex items-center text-sm text-gray-400\">\n                                  <Clock className=\"w-3 h-3 mr-1\" />\n                                  {time} ({appointment.duration}min)\n                                </div>\n                                {appointment.meetingLink && (\n                                  <div className=\"flex items-center text-sm text-gray-400\">\n                                    <Video className=\"w-3 h-3 mr-1\" />\n                                    Video call\n                                  </div>\n                                )}\n                              </div>\n                              {appointment.description && (\n                                <p className=\"text-sm text-gray-400 mt-1\">{appointment.description}</p>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"text-right\">\n                              <p className=\"text-sm text-white\">{date}</p>\n                              <Badge className={getStatusColor(appointment.status)}>\n                                <span className=\"flex items-center space-x-1\">\n                                  {getStatusIcon(appointment.status)}\n                                  <span>{appointment.status}</span>\n                                </span>\n                              </Badge>\n                            </div>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => setSelectedAppointment(appointment)}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  View Details\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(appointment.id, 'confirmed')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Mark as Confirmed\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(appointment.id, 'completed')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Mark as Completed\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(appointment.id, 'cancelled')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Cancel Appointment\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Appointment Details Modal */}\n        {selectedAppointment && (\n          <Dialog open={!!selectedAppointment} onOpenChange={() => setSelectedAppointment(null)}>\n            <DialogContent className=\"bg-surface border-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">{selectedAppointment.title}</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Appointment details and information\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Date & Time</Label>\n                    <p className=\"text-gray-300 mt-1\">\n                      {formatDate(selectedAppointment.scheduledAt).date} at {formatDate(selectedAppointment.scheduledAt).time}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Duration</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedAppointment.duration} minutes</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Status</Label>\n                    <Badge className={`mt-1 ${getStatusColor(selectedAppointment.status)}`}>\n                      <span className=\"flex items-center space-x-1\">\n                        {getStatusIcon(selectedAppointment.status)}\n                        <span>{selectedAppointment.status}</span>\n                      </span>\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Service</Label>\n                    <p className=\"text-gray-300 mt-1\">\n                      {services?.find((s: any) => s.id === selectedAppointment.serviceId)?.name || 'General Consultation'}\n                    </p>\n                  </div>\n                </div>\n\n                {selectedAppointment.description && (\n                  <div>\n                    <Label className=\"text-white\">Description</Label>\n                    <p className=\"text-gray-300 mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                      {selectedAppointment.description}\n                    </p>\n                  </div>\n                )}\n\n                {selectedAppointment.meetingLink && (\n                  <div>\n                    <Label className=\"text-white\">Meeting Link</Label>\n                    <div className=\"mt-1\">\n                      <a \n                        href={selectedAppointment.meetingLink} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:text-primary/80 underline flex items-center\"\n                      >\n                        <Video className=\"w-4 h-4 mr-2\" />\n                        Join Video Call\n                      </a>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedAppointment.id, 'confirmed')}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    Confirm\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedAppointment.id, 'completed')}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                  >\n                    Mark Complete\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedAppointment.id, 'cancelled')}\n                    variant=\"destructive\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedAppointment(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":26871},"client/src/pages/business/chatbot-designer.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport FlowBuilder from \"@/components/chatbot/FlowBuilder\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Settings, Palette, Code, Eye } from \"lucide-react\";\n\nexport default function ChatbotDesigner() {\n  const { toast } = useToast();\n  const [selectedChatbot, setSelectedChatbot] = useState<string | null>(null);\n  const [newChatbotName, setNewChatbotName] = useState(\"\");\n\n  const { data: chatbots, isLoading } = useQuery({\n    queryKey: [\"/api/chatbots\"],\n    retry: false,\n  });\n\n  const createChatbotMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/chatbots\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chatbots\"] });\n      toast({\n        title: \"Success\",\n        description: \"Chatbot created successfully\",\n      });\n      setNewChatbotName(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create chatbot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateChatbotMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/chatbots/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chatbots\"] });\n      toast({\n        title: \"Success\",\n        description: \"Chatbot updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update chatbot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateChatbot = () => {\n    if (!newChatbotName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a chatbot name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createChatbotMutation.mutate({\n      name: newChatbotName,\n      description: \"\",\n      welcomeMessage: \"Hi! How can I help you today?\",\n      fallbackMessage: \"I'm sorry, I didn't understand that. Can you please rephrase your question?\",\n      theme: {\n        primaryColor: \"#6366F1\",\n        secondaryColor: \"#8B5CF6\",\n        backgroundColor: \"#FFFFFF\",\n        textColor: \"#000000\",\n      },\n      flows: {},\n    });\n  };\n\n  const currentChatbot = chatbots?.find((bot: any) => bot.id === selectedChatbot);\n\n  const handleUpdateChatbot = (field: string, value: any) => {\n    if (!selectedChatbot) return;\n\n    updateChatbotMutation.mutate({\n      id: selectedChatbot,\n      data: { [field]: value },\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-white\">Loading chatbots...</div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">Chatbot Designer</h1>\n            <p className=\"text-gray-400\">Create and customize your chatbot experience</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                placeholder=\"Enter chatbot name\"\n                value={newChatbotName}\n                onChange={(e) => setNewChatbotName(e.target.value)}\n                className=\"w-48\"\n              />\n              <Button \n                onClick={handleCreateChatbot} \n                disabled={createChatbotMutation.isPending}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Chatbot\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Chatbot Selection */}\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Select Chatbot</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Choose a chatbot to edit or create a new one\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {chatbots?.map((chatbot: any) => (\n                <Card\n                  key={chatbot.id}\n                  className={`cursor-pointer border-2 transition-colors ${\n                    selectedChatbot === chatbot.id\n                      ? \"border-primary bg-primary/10\"\n                      : \"border-gray-600 hover:border-gray-500 bg-gray-700\"\n                  }`}\n                  onClick={() => setSelectedChatbot(chatbot.id)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-white\">{chatbot.name}</h3>\n                      <Badge variant={chatbot.isActive ? \"default\" : \"secondary\"}>\n                        {chatbot.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-400\">{chatbot.description || \"No description\"}</p>\n                    <div className=\"mt-2 text-xs text-gray-500\">\n                      Status: {chatbot.status}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chatbot Editor */}\n        {selectedChatbot && currentChatbot && (\n          <Tabs defaultValue=\"settings\" className=\"space-y-6\">\n            <TabsList className=\"bg-gray-800 border-gray-700\">\n              <TabsTrigger value=\"settings\" className=\"data-[state=active]:bg-primary\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n              <TabsTrigger value=\"flows\" className=\"data-[state=active]:bg-primary\">\n                <Code className=\"w-4 h-4 mr-2\" />\n                Conversation Flows\n              </TabsTrigger>\n              <TabsTrigger value=\"appearance\" className=\"data-[state=active]:bg-primary\">\n                <Palette className=\"w-4 h-4 mr-2\" />\n                Appearance\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" className=\"data-[state=active]:bg-primary\">\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Preview\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"settings\">\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Basic Settings</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Configure your chatbot's basic information and behavior\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"name\" className=\"text-white\">Chatbot Name</Label>\n                        <Input\n                          id=\"name\"\n                          value={currentChatbot.name}\n                          onChange={(e) => handleUpdateChatbot(\"name\", e.target.value)}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"description\" className=\"text-white\">Description</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={currentChatbot.description || \"\"}\n                          onChange={(e) => handleUpdateChatbot(\"description\", e.target.value)}\n                          className=\"mt-1\"\n                          rows={3}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"status\" className=\"text-white\">Status</Label>\n                        <Select\n                          value={currentChatbot.status}\n                          onValueChange={(value) => handleUpdateChatbot(\"status\", value)}\n                        >\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"draft\">Draft</SelectItem>\n                            <SelectItem value=\"published\">Published</SelectItem>\n                            <SelectItem value=\"archived\">Archived</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"welcome\" className=\"text-white\">Welcome Message</Label>\n                        <Textarea\n                          id=\"welcome\"\n                          value={currentChatbot.welcomeMessage || \"\"}\n                          onChange={(e) => handleUpdateChatbot(\"welcomeMessage\", e.target.value)}\n                          className=\"mt-1\"\n                          rows={3}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"fallback\" className=\"text-white\">Fallback Message</Label>\n                        <Textarea\n                          id=\"fallback\"\n                          value={currentChatbot.fallbackMessage || \"\"}\n                          onChange={(e) => handleUpdateChatbot(\"fallbackMessage\", e.target.value)}\n                          className=\"mt-1\"\n                          rows={3}\n                        />\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          id=\"active\"\n                          checked={currentChatbot.isActive}\n                          onCheckedChange={(checked) => handleUpdateChatbot(\"isActive\", checked)}\n                        />\n                        <Label htmlFor=\"active\" className=\"text-white\">\n                          Active on Website\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"flows\">\n              <FlowBuilder\n                chatbot={currentChatbot}\n                onUpdate={(flows) => handleUpdateChatbot(\"flows\", flows)}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"appearance\">\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Chatbot Appearance</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Customize the look and feel of your chatbot widget\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-white\">Primary Color</Label>\n                        <Input\n                          type=\"color\"\n                          value={currentChatbot.theme?.primaryColor || \"#6366F1\"}\n                          onChange={(e) => handleUpdateChatbot(\"theme\", {\n                            ...currentChatbot.theme,\n                            primaryColor: e.target.value\n                          })}\n                          className=\"mt-1 h-12\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-white\">Secondary Color</Label>\n                        <Input\n                          type=\"color\"\n                          value={currentChatbot.theme?.secondaryColor || \"#8B5CF6\"}\n                          onChange={(e) => handleUpdateChatbot(\"theme\", {\n                            ...currentChatbot.theme,\n                            secondaryColor: e.target.value\n                          })}\n                          className=\"mt-1 h-12\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-white\">Background Color</Label>\n                        <Input\n                          type=\"color\"\n                          value={currentChatbot.theme?.backgroundColor || \"#FFFFFF\"}\n                          onChange={(e) => handleUpdateChatbot(\"theme\", {\n                            ...currentChatbot.theme,\n                            backgroundColor: e.target.value\n                          })}\n                          className=\"mt-1 h-12\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-white\">Text Color</Label>\n                        <Input\n                          type=\"color\"\n                          value={currentChatbot.theme?.textColor || \"#000000\"}\n                          onChange={(e) => handleUpdateChatbot(\"theme\", {\n                            ...currentChatbot.theme,\n                            textColor: e.target.value\n                          })}\n                          className=\"mt-1 h-12\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"preview\">\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Chatbot Preview</CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    See how your chatbot will appear to visitors\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-gray-700 rounded-lg p-6 min-h-96\">\n                    <div className=\"max-w-sm mx-auto\">\n                      {/* Chatbot Widget Preview */}\n                      <div className=\"bg-white rounded-lg shadow-xl border overflow-hidden\">\n                        <div \n                          className=\"text-white p-4 flex items-center justify-between\"\n                          style={{ backgroundColor: currentChatbot.theme?.primaryColor || \"#6366F1\" }}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm\">🤖</span>\n                            </div>\n                            <span className=\"font-medium\">{currentChatbot.name}</span>\n                          </div>\n                        </div>\n                        <div className=\"p-4 h-64 overflow-y-auto\" style={{ backgroundColor: currentChatbot.theme?.backgroundColor || \"#FFFFFF\" }}>\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-start space-x-2\">\n                              <div \n                                className=\"w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0\"\n                                style={{ backgroundColor: currentChatbot.theme?.primaryColor || \"#6366F1\" }}\n                              >\n                                <span className=\"text-white text-xs\">🤖</span>\n                              </div>\n                              <div \n                                className=\"p-3 rounded-lg shadow-sm max-w-xs\"\n                                style={{ backgroundColor: \"#F3F4F6\", color: currentChatbot.theme?.textColor || \"#000000\" }}\n                              >\n                                <p className=\"text-sm\">{currentChatbot.welcomeMessage}</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"p-3 border-t border-gray-200\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input \n                              type=\"text\" \n                              placeholder=\"Type your message...\" \n                              className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm\"\n                              style={{ color: currentChatbot.theme?.textColor || \"#000000\" }}\n                            />\n                            <button \n                              className=\"text-white p-2 rounded-lg\"\n                              style={{ backgroundColor: currentChatbot.theme?.primaryColor || \"#6366F1\" }}\n                            >\n                              ▶\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":18466},"client/src/pages/business/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport StatsCard from \"@/components/dashboard/StatsCard\";\nimport ConversationsChart from \"@/components/dashboard/ConversationsChart\";\nimport RecentActivity from \"@/components/dashboard/RecentActivity\";\nimport LeadsTable from \"@/components/dashboard/LeadsTable\";\nimport AppointmentsTable from \"@/components/dashboard/AppointmentsTable\";\nimport ChatbotPreview from \"@/components/dashboard/ChatbotPreview\";\nimport { MessageSquare, UserPlus, Calendar, DollarSign } from \"lucide-react\";\n\nexport default function BusinessDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: leads, isLoading: leadsLoading } = useQuery({\n    queryKey: [\"/api/leads\"],\n    retry: false,\n  });\n\n  const { data: appointments, isLoading: appointmentsLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n    retry: false,\n  });\n\n  const { data: chatbots, isLoading: chatbotsLoading } = useQuery({\n    queryKey: [\"/api/chatbots\"],\n    retry: false,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-8\">\n        {/* Page Header */}\n        <div>\n          <h1 className=\"text-2xl font-bold text-white\">Dashboard Overview</h1>\n          <p className=\"text-gray-400\">Monitor your chatbot performance and business metrics</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Conversations\"\n            value={stats?.totalConversations || 0}\n            icon={MessageSquare}\n            change={12.5}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"New Leads\"\n            value={stats?.newLeads || 0}\n            icon={UserPlus}\n            change={8.2}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"Appointments\"\n            value={stats?.appointmentsScheduled || 0}\n            icon={Calendar}\n            change={15.3}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"Avg. Satisfaction\"\n            value={stats?.averageSatisfaction ? stats.averageSatisfaction.toFixed(1) : \"0.0\"}\n            icon={DollarSign}\n            change={23.1}\n            loading={statsLoading}\n          />\n        </div>\n\n        {/* Charts and Activity */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <ConversationsChart />\n          </div>\n          <div>\n            <RecentActivity />\n          </div>\n        </div>\n\n        {/* Tables */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <LeadsTable leads={leads || []} loading={leadsLoading} />\n          <AppointmentsTable appointments={appointments || []} loading={appointmentsLoading} />\n        </div>\n\n        {/* Chatbot Preview */}\n        <ChatbotPreview chatbots={chatbots || []} loading={chatbotsLoading} />\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4043},"client/src/pages/business/leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users, Plus, Search, Filter, Mail, Phone, Calendar, Star, TrendingUp, UserPlus, Target, MoreHorizontal, Eye, Edit } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function BusinessLeads() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sourceFilter, setSourceFilter] = useState(\"all\");\n  const [selectedLead, setSelectedLead] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newLeadData, setNewLeadData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    source: 'manual',\n    notes: ''\n  });\n\n  const { data: leads, isLoading: leadsLoading } = useQuery({\n    queryKey: [\"/api/leads\"],\n    retry: false,\n  });\n\n  const createLeadMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/leads\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewLeadData({ name: '', email: '', phone: '', source: 'manual', notes: '' });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateLeadMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/leads/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'new':\n        return 'bg-blue-500/10 text-blue-400';\n      case 'contacted':\n        return 'bg-yellow-500/10 text-yellow-400';\n      case 'qualified':\n        return 'bg-green-500/10 text-green-400';\n      case 'converted':\n        return 'bg-purple-500/10 text-purple-400';\n      case 'lost':\n        return 'bg-red-500/10 text-red-400';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'bg-success/10 text-success';\n    if (score >= 60) return 'bg-warning/10 text-warning';\n    if (score >= 40) return 'bg-accent/10 text-accent';\n    return 'bg-gray-500/10 text-gray-400';\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source?.toLowerCase()) {\n      case 'chatbot':\n        return 'bg-primary/10 text-primary';\n      case 'website':\n        return 'bg-secondary/10 text-secondary';\n      case 'manual':\n        return 'bg-accent/10 text-accent';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const filteredLeads = leads?.filter((lead: any) => {\n    const matchesSearch = lead.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.phone?.includes(searchTerm);\n    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;\n    const matchesSource = sourceFilter === 'all' || lead.source === sourceFilter;\n    return matchesSearch && matchesStatus && matchesSource;\n  }) || [];\n\n  const handleCreateLead = () => {\n    if (!newLeadData.name.trim() && !newLeadData.email.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide at least a name or email\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createLeadMutation.mutate(newLeadData);\n  };\n\n  const handleUpdateStatus = (leadId: string, status: string) => {\n    updateLeadMutation.mutate({\n      id: leadId,\n      data: { status }\n    });\n  };\n\n  const leadStats = {\n    total: leads?.length || 0,\n    new: leads?.filter((l: any) => l.status === 'new').length || 0,\n    qualified: leads?.filter((l: any) => l.status === 'qualified').length || 0,\n    converted: leads?.filter((l: any) => l.status === 'converted').length || 0,\n    avgScore: leads?.reduce((sum: number, lead: any) => sum + (lead.score || 0), 0) / (leads?.length || 1) || 0\n  };\n\n  return (\n    <DashboardLayout title=\"Lead Management\" description=\"Track and manage your customer leads and conversions\">\n      <div className=\"space-y-6\">\n        {/* Lead Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Users className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Leads</p>\n                  <p className=\"text-2xl font-bold text-white\">{leadStats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n                  <UserPlus className=\"text-blue-400 w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">New Leads</p>\n                  <p className=\"text-2xl font-bold text-white\">{leadStats.new}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <Target className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Qualified</p>\n                  <p className=\"text-2xl font-bold text-white\">{leadStats.qualified}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <TrendingUp className=\"text-secondary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Avg. Score</p>\n                  <p className=\"text-2xl font-bold text-white\">{leadStats.avgScore.toFixed(1)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lead Management */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">All Leads</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your customer leads and track conversion progress\n                </CardDescription>\n              </div>\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Lead\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-surface border-border\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-white\">Add New Lead</DialogTitle>\n                    <DialogDescription className=\"text-gray-400\">\n                      Create a new lead manually\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-white\">Full Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={newLeadData.name}\n                        onChange={(e) => setNewLeadData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"Enter full name\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-white\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newLeadData.email}\n                        onChange={(e) => setNewLeadData(prev => ({ ...prev, email: e.target.value }))}\n                        placeholder=\"Enter email address\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"text-white\">Phone</Label>\n                      <Input\n                        id=\"phone\"\n                        value={newLeadData.phone}\n                        onChange={(e) => setNewLeadData(prev => ({ ...prev, phone: e.target.value }))}\n                        placeholder=\"Enter phone number\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"source\" className=\"text-white\">Source</Label>\n                      <Select \n                        value={newLeadData.source} \n                        onValueChange={(value) => setNewLeadData(prev => ({ ...prev, source: value }))}\n                      >\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-surface border-border\">\n                          <SelectItem value=\"manual\">Manual Entry</SelectItem>\n                          <SelectItem value=\"website\">Website</SelectItem>\n                          <SelectItem value=\"chatbot\">Chatbot</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"notes\" className=\"text-white\">Notes</Label>\n                      <Textarea\n                        id=\"notes\"\n                        value={newLeadData.notes}\n                        onChange={(e) => setNewLeadData(prev => ({ ...prev, notes: e.target.value }))}\n                        placeholder=\"Add any notes about this lead...\"\n                        className=\"mt-1\"\n                        rows={3}\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-4\">\n                      <Button \n                        onClick={handleCreateLead}\n                        disabled={createLeadMutation.isPending}\n                        className=\"bg-primary hover:bg-primary/90\"\n                      >\n                        Create Lead\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsCreateDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Filters */}\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search leads...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-surface border-border\">\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"converted\">Converted</SelectItem>\n                  <SelectItem value=\"lost\">Lost</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sourceFilter} onValueChange={setSourceFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by source\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-surface border-border\">\n                  <SelectItem value=\"all\">All Sources</SelectItem>\n                  <SelectItem value=\"chatbot\">Chatbot</SelectItem>\n                  <SelectItem value=\"website\">Website</SelectItem>\n                  <SelectItem value=\"manual\">Manual</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Leads Table */}\n            <div className=\"border border-border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-800/50\">\n                    <tr>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Contact\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Source\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Score\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Status\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Created\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {leadsLoading ? (\n                      [...Array(10)].map((_, i) => (\n                        <tr key={i}>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Skeleton className=\"h-8 w-8 rounded-full bg-gray-700\" />\n                              <div className=\"space-y-2\">\n                                <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                                <Skeleton className=\"h-3 w-24 bg-gray-700\" />\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\"><Skeleton className=\"h-6 w-16 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-6 w-12 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-6 w-20 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-4 w-20 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-8 w-8 bg-gray-700\" /></td>\n                        </tr>\n                      ))\n                    ) : filteredLeads.length === 0 ? (\n                      <tr>\n                        <td colSpan={6} className=\"text-center py-12\">\n                          <Users className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                          <p className=\"text-gray-400\">No leads found</p>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            {searchTerm || statusFilter !== 'all' || sourceFilter !== 'all'\n                              ? 'Try adjusting your filters'\n                              : 'Leads will appear here when captured by your chatbot'\n                            }\n                          </p>\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredLeads.map((lead: any) => (\n                        <tr key={lead.id} className=\"hover:bg-gray-800/25\">\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-primary\">\n                                  {lead.name?.charAt(0) || lead.email?.charAt(0) || '?'}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-white\">\n                                  {lead.name || 'Anonymous'}\n                                </p>\n                                <div className=\"flex items-center space-x-2 text-xs text-gray-400\">\n                                  {lead.email && (\n                                    <span className=\"flex items-center\">\n                                      <Mail className=\"w-3 h-3 mr-1\" />\n                                      {lead.email}\n                                    </span>\n                                  )}\n                                  {lead.phone && (\n                                    <span className=\"flex items-center\">\n                                      <Phone className=\"w-3 h-3 mr-1\" />\n                                      {lead.phone}\n                                    </span>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={getSourceColor(lead.source)}>\n                              {lead.source || 'Unknown'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge className={getScoreColor(lead.score || 0)}>\n                                {lead.score || 0}\n                              </Badge>\n                              {lead.score >= 80 && <Star className=\"w-4 h-4 text-yellow-400\" />}\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={getStatusColor(lead.status)}>\n                              {lead.status || 'New'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"text-sm text-gray-400\">\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"w-3 h-3 mr-1\" />\n                                {new Date(lead.createdAt).toLocaleDateString()}\n                              </div>\n                              <div className=\"text-xs text-gray-500\">\n                                {new Date(lead.createdAt).toLocaleTimeString()}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => setSelectedLead(lead)}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  <Eye className=\"w-4 h-4 mr-2\" />\n                                  View Details\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(lead.id, 'contacted')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Mark as Contacted\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(lead.id, 'qualified')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Mark as Qualified\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(lead.id, 'converted')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Mark as Converted\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Lead Details Modal */}\n        {selectedLead && (\n          <Dialog open={!!selectedLead} onOpenChange={() => setSelectedLead(null)}>\n            <DialogContent className=\"bg-surface border-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">\n                  {selectedLead.name || 'Anonymous Lead'}\n                </DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Lead details and interaction history\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Name</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedLead.name || 'Not provided'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Email</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedLead.email || 'Not provided'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Phone</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedLead.phone || 'Not provided'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Source</Label>\n                    <Badge className={`mt-1 ${getSourceColor(selectedLead.source)}`}>\n                      {selectedLead.source || 'Unknown'}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Score</Label>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge className={getScoreColor(selectedLead.score || 0)}>\n                        {selectedLead.score || 0}\n                      </Badge>\n                      {selectedLead.score >= 80 && <Star className=\"w-4 h-4 text-yellow-400\" />}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Status</Label>\n                    <Badge className={`mt-1 ${getStatusColor(selectedLead.status)}`}>\n                      {selectedLead.status || 'New'}\n                    </Badge>\n                  </div>\n                </div>\n\n                {selectedLead.notes && (\n                  <div>\n                    <Label className=\"text-white\">Notes</Label>\n                    <p className=\"text-gray-300 mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                      {selectedLead.notes}\n                    </p>\n                  </div>\n                )}\n\n                {selectedLead.metadata && (\n                  <div>\n                    <Label className=\"text-white\">Additional Information</Label>\n                    <div className=\"mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                      <pre className=\"text-sm text-gray-300 whitespace-pre-wrap\">\n                        {JSON.stringify(selectedLead.metadata, null, 2)}\n                      </pre>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedLead.id, 'contacted')}\n                    className=\"bg-yellow-600 hover:bg-yellow-700\"\n                  >\n                    Mark as Contacted\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedLead.id, 'qualified')}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    Mark as Qualified\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedLead(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":28153},"client/src/pages/business/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Package, Plus, DollarSign, Clock, Calendar, MoreHorizontal, Edit, Trash2, Eye } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function BusinessProducts() {\n  const { toast } = useToast();\n  const [selectedService, setSelectedService] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [newServiceData, setNewServiceData] = useState({\n    name: '',\n    description: '',\n    duration: 30,\n    price: '',\n    isActive: true,\n    availableSlots: []\n  });\n  const [editServiceData, setEditServiceData] = useState<any>(null);\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n    retry: false,\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/services\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewServiceData({\n        name: '',\n        description: '',\n        duration: 30,\n        price: '',\n        isActive: true,\n        availableSlots: []\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/services/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditServiceData(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/services/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const serviceStats = {\n    total: services?.length || 0,\n    active: services?.filter((s: any) => s.isActive).length || 0,\n    avgPrice: services?.reduce((sum: number, service: any) => sum + (parseFloat(service.price) || 0), 0) / (services?.length || 1) || 0,\n    avgDuration: services?.reduce((sum: number, service: any) => sum + (service.duration || 0), 0) / (services?.length || 1) || 0\n  };\n\n  const handleCreateService = () => {\n    if (!newServiceData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Service name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createServiceMutation.mutate({\n      ...newServiceData,\n      price: newServiceData.price ? parseFloat(newServiceData.price) : null\n    });\n  };\n\n  const handleEditService = (service: any) => {\n    setEditServiceData({\n      ...service,\n      price: service.price ? service.price.toString() : ''\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateService = () => {\n    if (!editServiceData?.name?.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Service name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateServiceMutation.mutate({\n      id: editServiceData.id,\n      data: {\n        ...editServiceData,\n        price: editServiceData.price ? parseFloat(editServiceData.price) : null\n      }\n    });\n  };\n\n  const handleDeleteService = (serviceId: string) => {\n    if (confirm('Are you sure you want to delete this service?')) {\n      deleteServiceMutation.mutate(serviceId);\n    }\n  };\n\n  const handleToggleActive = (serviceId: string, isActive: boolean) => {\n    updateServiceMutation.mutate({\n      id: serviceId,\n      data: { isActive }\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Products & Services\" description=\"Manage your service offerings and pricing\">\n      <div className=\"space-y-6\">\n        {/* Service Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Package className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Services</p>\n                  <p className=\"text-2xl font-bold text-white\">{serviceStats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <Package className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Active Services</p>\n                  <p className=\"text-2xl font-bold text-white\">{serviceStats.active}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <DollarSign className=\"text-accent w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Avg. Price</p>\n                  <p className=\"text-2xl font-bold text-white\">${serviceStats.avgPrice.toFixed(0)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <Clock className=\"text-secondary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Avg. Duration</p>\n                  <p className=\"text-2xl font-bold text-white\">{serviceStats.avgDuration.toFixed(0)}min</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Services Management */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">Service Offerings</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your services, pricing, and availability\n                </CardDescription>\n              </div>\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Service\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-surface border-border max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-white\">Add New Service</DialogTitle>\n                    <DialogDescription className=\"text-gray-400\">\n                      Create a new service offering for your customers\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-white\">Service Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={newServiceData.name}\n                        onChange={(e) => setNewServiceData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"Enter service name\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"description\" className=\"text-white\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={newServiceData.description}\n                        onChange={(e) => setNewServiceData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe your service...\"\n                        className=\"mt-1\"\n                        rows={3}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"duration\" className=\"text-white\">Duration (minutes)</Label>\n                        <Input\n                          id=\"duration\"\n                          type=\"number\"\n                          min=\"15\"\n                          max=\"480\"\n                          value={newServiceData.duration}\n                          onChange={(e) => setNewServiceData(prev => ({ ...prev, duration: parseInt(e.target.value) || 30 }))}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"price\" className=\"text-white\">Price ($)</Label>\n                        <Input\n                          id=\"price\"\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          value={newServiceData.price}\n                          onChange={(e) => setNewServiceData(prev => ({ ...prev, price: e.target.value }))}\n                          placeholder=\"0.00\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"active\"\n                        checked={newServiceData.isActive}\n                        onCheckedChange={(checked) => setNewServiceData(prev => ({ ...prev, isActive: checked }))}\n                      />\n                      <Label htmlFor=\"active\" className=\"text-white\">\n                        Active Service\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-4\">\n                      <Button \n                        onClick={handleCreateService}\n                        disabled={createServiceMutation.isPending}\n                        className=\"bg-primary hover:bg-primary/90\"\n                      >\n                        Create Service\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsCreateDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {servicesLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"bg-gray-800/50 border-border\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <Skeleton className=\"h-6 w-32 bg-gray-700\" />\n                        <Skeleton className=\"h-16 w-full bg-gray-700\" />\n                        <div className=\"flex justify-between\">\n                          <Skeleton className=\"h-4 w-16 bg-gray-700\" />\n                          <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : services?.length === 0 ? (\n              <Card className=\"bg-gray-800/50 border-border\">\n                <CardContent className=\"text-center py-12\">\n                  <Package className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No Services Found</h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    Create your first service to start offering appointments\n                  </p>\n                  <Button \n                    onClick={() => setIsCreateDialogOpen(true)}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Create First Service\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {services?.map((service: any) => (\n                  <Card key={service.id} className=\"bg-gray-800/50 border-border hover:border-primary/50 transition-colors\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"font-semibold text-white\">{service.name}</h3>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                              <DropdownMenuItem \n                                onClick={() => setSelectedService(service)}\n                                className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                              >\n                                <Eye className=\"w-4 h-4 mr-2\" />\n                                View Details\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleEditService(service)}\n                                className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                              >\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Edit Service\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDeleteService(service.id)}\n                                className=\"text-red-400 hover:text-red-300 hover:bg-gray-700\"\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                        <p className=\"text-sm text-gray-400 line-clamp-3\">\n                          {service.description || 'No description provided'}\n                        </p>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <div className=\"flex items-center text-gray-400\">\n                            <Clock className=\"w-4 h-4 mr-1\" />\n                            {service.duration} min\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {service.price && (\n                              <span className=\"text-white font-semibold\">\n                                ${parseFloat(service.price).toFixed(2)}\n                              </span>\n                            )}\n                            <Badge variant={service.isActive ? \"default\" : \"secondary\"}>\n                              {service.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between pt-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              checked={service.isActive}\n                              onCheckedChange={(checked) => handleToggleActive(service.id, checked)}\n                              size=\"sm\"\n                            />\n                            <span className=\"text-sm text-gray-400\">Available</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Service Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"bg-surface border-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Edit Service</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Update your service details and pricing\n              </DialogDescription>\n            </DialogHeader>\n            {editServiceData && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"edit-name\" className=\"text-white\">Service Name</Label>\n                  <Input\n                    id=\"edit-name\"\n                    value={editServiceData.name}\n                    onChange={(e) => setEditServiceData((prev: any) => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter service name\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-description\" className=\"text-white\">Description</Label>\n                  <Textarea\n                    id=\"edit-description\"\n                    value={editServiceData.description}\n                    onChange={(e) => setEditServiceData((prev: any) => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe your service...\"\n                    className=\"mt-1\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-duration\" className=\"text-white\">Duration (minutes)</Label>\n                    <Input\n                      id=\"edit-duration\"\n                      type=\"number\"\n                      min=\"15\"\n                      max=\"480\"\n                      value={editServiceData.duration}\n                      onChange={(e) => setEditServiceData((prev: any) => ({ ...prev, duration: parseInt(e.target.value) || 30 }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-price\" className=\"text-white\">Price ($)</Label>\n                    <Input\n                      id=\"edit-price\"\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={editServiceData.price}\n                      onChange={(e) => setEditServiceData((prev: any) => ({ ...prev, price: e.target.value }))}\n                      placeholder=\"0.00\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"edit-active\"\n                    checked={editServiceData.isActive}\n                    onCheckedChange={(checked) => setEditServiceData((prev: any) => ({ ...prev, isActive: checked }))}\n                  />\n                  <Label htmlFor=\"edit-active\" className=\"text-white\">\n                    Active Service\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button \n                    onClick={handleUpdateService}\n                    disabled={updateServiceMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Update Service\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsEditDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Service Details Modal */}\n        {selectedService && (\n          <Dialog open={!!selectedService} onOpenChange={() => setSelectedService(null)}>\n            <DialogContent className=\"bg-surface border-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">{selectedService.name}</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Service details and configuration\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Service Name</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedService.name}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Status</Label>\n                    <Badge className={`mt-1 ${selectedService.isActive ? 'bg-success/10 text-success' : 'bg-gray-500/10 text-gray-400'}`}>\n                      {selectedService.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Duration</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedService.duration} minutes</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Price</Label>\n                    <p className=\"text-gray-300 mt-1\">\n                      {selectedService.price ? `$${parseFloat(selectedService.price).toFixed(2)}` : 'Free'}\n                    </p>\n                  </div>\n                </div>\n\n                {selectedService.description && (\n                  <div>\n                    <Label className=\"text-white\">Description</Label>\n                    <p className=\"text-gray-300 mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                      {selectedService.description}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => handleEditService(selectedService)}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Edit Service\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedService(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":25502},"client/src/pages/business/qa-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { MessageSquare, Plus, Search, Tag, TrendingUp, MoreHorizontal, Edit, Trash2, Eye, Brain } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function QAManagement() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedKB, setSelectedKB] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [newKBData, setNewKBData] = useState({\n    question: '',\n    answer: '',\n    tags: '',\n    isActive: true\n  });\n  const [editKBData, setEditKBData] = useState<any>(null);\n\n  const { data: knowledgeBase, isLoading: kbLoading } = useQuery({\n    queryKey: [\"/api/knowledge-base\"],\n    retry: false,\n  });\n\n  const createKBMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/knowledge-base\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/knowledge-base\"] });\n      toast({\n        title: \"Success\",\n        description: \"Q&A item created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewKBData({\n        question: '',\n        answer: '',\n        tags: '',\n        isActive: true\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create Q&A item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateKBMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/knowledge-base/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/knowledge-base\"] });\n      toast({\n        title: \"Success\",\n        description: \"Q&A item updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditKBData(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update Q&A item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteKBMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/knowledge-base/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/knowledge-base\"] });\n      toast({\n        title: \"Success\",\n        description: \"Q&A item deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete Q&A item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredKB = knowledgeBase?.filter((item: any) => {\n    const matchesSearch = item.question?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.answer?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.tags?.some((tag: string) => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    return matchesSearch;\n  }) || [];\n\n  const kbStats = {\n    total: knowledgeBase?.length || 0,\n    active: knowledgeBase?.filter((kb: any) => kb.isActive).length || 0,\n    totalUsage: knowledgeBase?.reduce((sum: number, kb: any) => sum + (kb.usage_count || 0), 0) || 0,\n    avgUsage: knowledgeBase?.length ? \n      (knowledgeBase.reduce((sum: number, kb: any) => sum + (kb.usage_count || 0), 0) / knowledgeBase.length).toFixed(1) : 0\n  };\n\n  const handleCreateKB = () => {\n    if (!newKBData.question.trim() || !newKBData.answer.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Both question and answer are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tags = newKBData.tags ? newKBData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [];\n\n    createKBMutation.mutate({\n      ...newKBData,\n      tags\n    });\n  };\n\n  const handleEditKB = (item: any) => {\n    setEditKBData({\n      ...item,\n      tags: item.tags ? item.tags.join(', ') : ''\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateKB = () => {\n    if (!editKBData?.question?.trim() || !editKBData?.answer?.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Both question and answer are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tags = editKBData.tags ? editKBData.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean) : [];\n\n    updateKBMutation.mutate({\n      id: editKBData.id,\n      data: {\n        ...editKBData,\n        tags\n      }\n    });\n  };\n\n  const handleDeleteKB = (id: string) => {\n    if (confirm('Are you sure you want to delete this Q&A item?')) {\n      deleteKBMutation.mutate(id);\n    }\n  };\n\n  const handleToggleActive = (id: string, isActive: boolean) => {\n    updateKBMutation.mutate({\n      id,\n      data: { isActive }\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Q&A Management\" description=\"Manage your chatbot's knowledge base with custom questions and answers\">\n      <div className=\"space-y-6\">\n        {/* Knowledge Base Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <MessageSquare className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Q&A Items</p>\n                  <p className=\"text-2xl font-bold text-white\">{kbStats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <Brain className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Active Items</p>\n                  <p className=\"text-2xl font-bold text-white\">{kbStats.active}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <TrendingUp className=\"text-accent w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Total Usage</p>\n                  <p className=\"text-2xl font-bold text-white\">{kbStats.totalUsage}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <Tag className=\"text-secondary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Avg. Usage</p>\n                  <p className=\"text-2xl font-bold text-white\">{kbStats.avgUsage}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Knowledge Base Management */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">Knowledge Base</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage custom questions and answers to train your chatbot\n                </CardDescription>\n              </div>\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Q&A\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-surface border-border max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-white\">Add New Q&A</DialogTitle>\n                    <DialogDescription className=\"text-gray-400\">\n                      Create a new question and answer pair for your chatbot\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"question\" className=\"text-white\">Question</Label>\n                      <Textarea\n                        id=\"question\"\n                        value={newKBData.question}\n                        onChange={(e) => setNewKBData(prev => ({ ...prev, question: e.target.value }))}\n                        placeholder=\"Enter the question customers might ask...\"\n                        className=\"mt-1\"\n                        rows={2}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"answer\" className=\"text-white\">Answer</Label>\n                      <Textarea\n                        id=\"answer\"\n                        value={newKBData.answer}\n                        onChange={(e) => setNewKBData(prev => ({ ...prev, answer: e.target.value }))}\n                        placeholder=\"Enter the answer your chatbot should provide...\"\n                        className=\"mt-1\"\n                        rows={4}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"tags\" className=\"text-white\">Tags (comma-separated)</Label>\n                      <Input\n                        id=\"tags\"\n                        value={newKBData.tags}\n                        onChange={(e) => setNewKBData(prev => ({ ...prev, tags: e.target.value }))}\n                        placeholder=\"e.g., pricing, support, features\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"active\"\n                        checked={newKBData.isActive}\n                        onCheckedChange={(checked) => setNewKBData(prev => ({ ...prev, isActive: checked }))}\n                      />\n                      <Label htmlFor=\"active\" className=\"text-white\">\n                        Active\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2 pt-4\">\n                      <Button \n                        onClick={handleCreateKB}\n                        disabled={createKBMutation.isPending}\n                        className=\"bg-primary hover:bg-primary/90\"\n                      >\n                        Create Q&A\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsCreateDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search */}\n            <div className=\"mb-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search questions, answers, or tags...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Knowledge Base Items */}\n            <div className=\"space-y-4\">\n              {kbLoading ? (\n                [...Array(5)].map((_, i) => (\n                  <Card key={i} className=\"bg-gray-800/50 border-border\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"space-y-4\">\n                        <Skeleton className=\"h-6 w-3/4 bg-gray-700\" />\n                        <Skeleton className=\"h-16 w-full bg-gray-700\" />\n                        <div className=\"flex justify-between\">\n                          <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                          <Skeleton className=\"h-6 w-20 bg-gray-700\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : filteredKB.length === 0 ? (\n                <Card className=\"bg-gray-800/50 border-border\">\n                  <CardContent className=\"text-center py-12\">\n                    <MessageSquare className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-white mb-2\">No Q&A Items Found</h3>\n                    <p className=\"text-gray-400 mb-6\">\n                      {searchTerm ? 'Try adjusting your search terms' : 'Create your first Q&A to train your chatbot'}\n                    </p>\n                    {!searchTerm && (\n                      <Button \n                        onClick={() => setIsCreateDialogOpen(true)}\n                        className=\"bg-primary hover:bg-primary/90\"\n                      >\n                        Create First Q&A\n                      </Button>\n                    )}\n                  </CardContent>\n                </Card>\n              ) : (\n                filteredKB.map((item: any) => (\n                  <Card key={item.id} className=\"bg-gray-800/50 border-border hover:border-primary/50 transition-colors\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-white mb-2\">{item.question}</h3>\n                            <p className=\"text-gray-300 text-sm leading-relaxed\">{item.answer}</p>\n                          </div>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                                <MoreHorizontal className=\"w-4 h-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                              <DropdownMenuItem \n                                onClick={() => setSelectedKB(item)}\n                                className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                              >\n                                <Eye className=\"w-4 h-4 mr-2\" />\n                                View Details\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleEditKB(item)}\n                                className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                              >\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Edit Q&A\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDeleteKB(item.id)}\n                                className=\"text-red-400 hover:text-red-300 hover:bg-gray-700\"\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            {item.tags && item.tags.length > 0 && (\n                              <div className=\"flex flex-wrap gap-1\">\n                                {item.tags.slice(0, 3).map((tag: string, index: number) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {tag}\n                                  </Badge>\n                                ))}\n                                {item.tags.length > 3 && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    +{item.tags.length - 3} more\n                                  </Badge>\n                                )}\n                              </div>\n                            )}\n                            <div className=\"text-xs text-gray-400\">\n                              Used {item.usage_count || 0} times\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Switch\n                              checked={item.isActive}\n                              onCheckedChange={(checked) => handleToggleActive(item.id, checked)}\n                              size=\"sm\"\n                            />\n                            <Badge variant={item.isActive ? \"default\" : \"secondary\"}>\n                              {item.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Edit Q&A Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"bg-surface border-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Edit Q&A</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Update your question and answer\n              </DialogDescription>\n            </DialogHeader>\n            {editKBData && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"edit-question\" className=\"text-white\">Question</Label>\n                  <Textarea\n                    id=\"edit-question\"\n                    value={editKBData.question}\n                    onChange={(e) => setEditKBData((prev: any) => ({ ...prev, question: e.target.value }))}\n                    placeholder=\"Enter the question customers might ask...\"\n                    className=\"mt-1\"\n                    rows={2}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-answer\" className=\"text-white\">Answer</Label>\n                  <Textarea\n                    id=\"edit-answer\"\n                    value={editKBData.answer}\n                    onChange={(e) => setEditKBData((prev: any) => ({ ...prev, answer: e.target.value }))}\n                    placeholder=\"Enter the answer your chatbot should provide...\"\n                    className=\"mt-1\"\n                    rows={4}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-tags\" className=\"text-white\">Tags (comma-separated)</Label>\n                  <Input\n                    id=\"edit-tags\"\n                    value={editKBData.tags}\n                    onChange={(e) => setEditKBData((prev: any) => ({ ...prev, tags: e.target.value }))}\n                    placeholder=\"e.g., pricing, support, features\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"edit-active\"\n                    checked={editKBData.isActive}\n                    onCheckedChange={(checked) => setEditKBData((prev: any) => ({ ...prev, isActive: checked }))}\n                  />\n                  <Label htmlFor=\"edit-active\" className=\"text-white\">\n                    Active\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button \n                    onClick={handleUpdateKB}\n                    disabled={updateKBMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Update Q&A\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsEditDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Q&A Details Modal */}\n        {selectedKB && (\n          <Dialog open={!!selectedKB} onOpenChange={() => setSelectedKB(null)}>\n            <DialogContent className=\"bg-surface border-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Q&A Details</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  View question and answer details\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-white\">Question</Label>\n                  <p className=\"text-gray-300 mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                    {selectedKB.question}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-white\">Answer</Label>\n                  <p className=\"text-gray-300 mt-1 bg-gray-800/50 p-3 rounded-lg\">\n                    {selectedKB.answer}\n                  </p>\n                </div>\n                {selectedKB.tags && selectedKB.tags.length > 0 && (\n                  <div>\n                    <Label className=\"text-white\">Tags</Label>\n                    <div className=\"flex flex-wrap gap-2 mt-1\">\n                      {selectedKB.tags.map((tag: string, index: number) => (\n                        <Badge key={index} variant=\"outline\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Status</Label>\n                    <Badge className={`mt-1 ${selectedKB.isActive ? 'bg-success/10 text-success' : 'bg-gray-500/10 text-gray-400'}`}>\n                      {selectedKB.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Usage Count</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedKB.usage_count || 0} times</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => handleEditKB(selectedKB)}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Edit Q&A\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedKB(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":25191},"client/src/pages/business/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { User, Building2, Key, Bell, Shield, CreditCard, Users, Globe, Save, Eye, EyeOff } from \"lucide-react\";\n\nexport default function BusinessSettings() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [profileData, setProfileData] = useState({\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n  });\n  const [businessData, setBusinessData] = useState({\n    name: '',\n    domain: '',\n    website: '',\n    description: '',\n  });\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    leadNotifications: true,\n    appointmentNotifications: true,\n    weeklyReports: true,\n  });\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    sessionTimeout: '24',\n  });\n\n  const { data: tenant, isLoading: tenantLoading } = useQuery({\n    queryKey: [\"/api/tenant/profile\"],\n    retry: false,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", \"/api/auth/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateBusinessMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", \"/api/tenant/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tenant/profile\"] });\n      toast({\n        title: \"Success\",\n        description: \"Business settings updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update business settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleSaveBusiness = () => {\n    updateBusinessMutation.mutate(businessData);\n  };\n\n  const generateApiKey = () => {\n    // In a real implementation, this would call an API endpoint\n    const newApiKey = `cb_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n    toast({\n      title: \"API Key Generated\",\n      description: \"Your new API key has been generated. Make sure to copy it now.\",\n    });\n    // Store the API key (this would be handled by the backend)\n  };\n\n  return (\n    <DashboardLayout title=\"Settings\" description=\"Manage your account, business, and application settings\">\n      <div className=\"space-y-6\">\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"bg-surface border-border\">\n            <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-primary\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"business\" className=\"data-[state=active]:bg-primary\">\n              <Building2 className=\"w-4 h-4 mr-2\" />\n              Business\n            </TabsTrigger>\n            <TabsTrigger value=\"api\" className=\"data-[state=active]:bg-primary\">\n              <Key className=\"w-4 h-4 mr-2\" />\n              API & Integrations\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"data-[state=active]:bg-primary\">\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"data-[state=active]:bg-primary\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Security\n            </TabsTrigger>\n            <TabsTrigger value=\"billing\" className=\"data-[state=active]:bg-primary\">\n              <CreditCard className=\"w-4 h-4 mr-2\" />\n              Billing\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Settings */}\n          <TabsContent value=\"profile\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Profile Information</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Update your personal information and preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <User className=\"w-10 h-10 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-white\">Profile Picture</h3>\n                      <p className=\"text-sm text-gray-400\">Upload a profile picture to personalize your account</p>\n                      <Button variant=\"outline\" className=\"mt-2\" disabled>\n                        Upload Photo\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"text-white\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={profileData.firstName}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, firstName: e.target.value }))}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"text-white\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={profileData.lastName}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, lastName: e.target.value }))}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-white\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 pt-4\">\n                    <Button \n                      onClick={handleSaveProfile}\n                      disabled={updateProfileMutation.isPending}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Profile\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Business Settings */}\n          <TabsContent value=\"business\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Business Information</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your business details and branding\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"businessName\" className=\"text-white\">Business Name</Label>\n                    <Input\n                      id=\"businessName\"\n                      value={businessData.name}\n                      onChange={(e) => setBusinessData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Your Business Name\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"domain\" className=\"text-white\">Domain</Label>\n                      <Input\n                        id=\"domain\"\n                        value={businessData.domain}\n                        onChange={(e) => setBusinessData(prev => ({ ...prev, domain: e.target.value }))}\n                        placeholder=\"yourbusiness.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"website\" className=\"text-white\">Website URL</Label>\n                      <Input\n                        id=\"website\"\n                        type=\"url\"\n                        value={businessData.website}\n                        onChange={(e) => setBusinessData(prev => ({ ...prev, website: e.target.value }))}\n                        placeholder=\"https://yourbusiness.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\" className=\"text-white\">Business Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={businessData.description}\n                      onChange={(e) => setBusinessData(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Describe your business...\"\n                      className=\"mt-1\"\n                      rows={4}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 pt-4\">\n                    <Button \n                      onClick={handleSaveBusiness}\n                      disabled={updateBusinessMutation.isPending}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Business Info\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Subscription</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your subscription plan and billing\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-white\">Current Plan</h4>\n                    <p className=\"text-sm text-gray-400\">Professional Plan - $99/month</p>\n                  </div>\n                  <Badge className=\"bg-success/10 text-success\">Active</Badge>\n                </div>\n                <div className=\"mt-4\">\n                  <Button variant=\"outline\">\n                    Manage Subscription\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* API & Integrations */}\n          <TabsContent value=\"api\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">API Configuration</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage API keys and integration settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-white\">API Key</Label>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Input\n                        type={showApiKey ? \"text\" : \"password\"}\n                        value=\"cb_1234567890_abcdefghijklmnop\"\n                        readOnly\n                        className=\"flex-1\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                      >\n                        {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={generateApiKey}\n                      >\n                        Regenerate\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-gray-400 mt-1\">\n                      Use this API key to integrate with external services\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-white\">Webhook URL</Label>\n                    <Input\n                      placeholder=\"https://your-app.com/webhooks/chatbot\"\n                      className=\"mt-1\"\n                    />\n                    <p className=\"text-sm text-gray-400 mt-1\">\n                      Receive real-time notifications for events\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-white\">Allowed Origins</Label>\n                    <Textarea\n                      placeholder=\"https://yourdomain.com&#10;https://app.yourdomain.com\"\n                      className=\"mt-1\"\n                      rows={3}\n                    />\n                    <p className=\"text-sm text-gray-400 mt-1\">\n                      List of domains allowed to use your chatbot (one per line)\n                    </p>\n                  </div>\n\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save API Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Third-party Integrations</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Connect with your favorite tools and services\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-500 rounded flex items-center justify-center\">\n                        <span className=\"text-white text-sm font-bold\">Z</span>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-white\">Zapier</h4>\n                        <p className=\"text-sm text-gray-400\">Automate workflows</p>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">Connect</Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-green-500 rounded flex items-center justify-center\">\n                        <span className=\"text-white text-sm font-bold\">S</span>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-white\">Slack</h4>\n                        <p className=\"text-sm text-gray-400\">Get notifications in Slack</p>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">Connect</Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-purple-500 rounded flex items-center justify-center\">\n                        <span className=\"text-white text-sm font-bold\">D</span>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-white\">Discord</h4>\n                        <p className=\"text-sm text-gray-400\">Community integration</p>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">Connect</Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notifications */}\n          <TabsContent value=\"notifications\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Notification Preferences</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Choose how you want to be notified about important events\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Email Notifications</h4>\n                      <p className=\"text-sm text-gray-400\">Receive notifications via email</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.emailNotifications}\n                      onCheckedChange={(checked) => \n                        setNotificationSettings(prev => ({ ...prev, emailNotifications: checked }))\n                      }\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">New Lead Notifications</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified when new leads are captured</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.leadNotifications}\n                      onCheckedChange={(checked) => \n                        setNotificationSettings(prev => ({ ...prev, leadNotifications: checked }))\n                      }\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Appointment Notifications</h4>\n                      <p className=\"text-sm text-gray-400\">Get notified about appointment updates</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.appointmentNotifications}\n                      onCheckedChange={(checked) => \n                        setNotificationSettings(prev => ({ ...prev, appointmentNotifications: checked }))\n                      }\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Weekly Reports</h4>\n                      <p className=\"text-sm text-gray-400\">Receive weekly performance summaries</p>\n                    </div>\n                    <Switch\n                      checked={notificationSettings.weeklyReports}\n                      onCheckedChange={(checked) => \n                        setNotificationSettings(prev => ({ ...prev, weeklyReports: checked }))\n                      }\n                    />\n                  </div>\n\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Notification Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security */}\n          <TabsContent value=\"security\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Security Settings</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your account security and access controls\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-medium text-white mb-4\">Password</h4>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"currentPassword\" className=\"text-white\">Current Password</Label>\n                        <Input\n                          id=\"currentPassword\"\n                          type=\"password\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"newPassword\" className=\"text-white\">New Password</Label>\n                        <Input\n                          id=\"newPassword\"\n                          type=\"password\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"confirmPassword\" className=\"text-white\">Confirm New Password</Label>\n                        <Input\n                          id=\"confirmPassword\"\n                          type=\"password\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <Button variant=\"outline\">\n                        Update Password\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-white\">Two-Factor Authentication</h4>\n                      <p className=\"text-sm text-gray-400\">Add an extra layer of security to your account</p>\n                    </div>\n                    <Switch\n                      checked={securitySettings.twoFactorEnabled}\n                      onCheckedChange={(checked) => \n                        setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: checked }))\n                      }\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-white\">Session Timeout</Label>\n                    <Select \n                      value={securitySettings.sessionTimeout}\n                      onValueChange={(value) => \n                        setSecuritySettings(prev => ({ ...prev, sessionTimeout: value }))\n                      }\n                    >\n                      <SelectTrigger className=\"mt-1 w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-surface border-border\">\n                        <SelectItem value=\"1\">1 hour</SelectItem>\n                        <SelectItem value=\"8\">8 hours</SelectItem>\n                        <SelectItem value=\"24\">24 hours</SelectItem>\n                        <SelectItem value=\"168\">1 week</SelectItem>\n                        <SelectItem value=\"never\">Never</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-sm text-gray-400 mt-1\">\n                      Automatically log out after this period of inactivity\n                    </p>\n                  </div>\n\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Security Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Billing */}\n          <TabsContent value=\"billing\">\n            <Card className=\"bg-surface border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Billing & Usage</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Manage your subscription, billing, and usage limits\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <Card className=\"bg-gray-800/50 border-border\">\n                      <CardContent className=\"p-4 text-center\">\n                        <h4 className=\"font-medium text-white\">Monthly Conversations</h4>\n                        <p className=\"text-2xl font-bold text-primary mt-2\">2,847</p>\n                        <p className=\"text-sm text-gray-400\">of 10,000 limit</p>\n                        <div className=\"w-full bg-gray-700 rounded-full h-2 mt-2\">\n                          <div className=\"bg-primary h-2 rounded-full\" style={{ width: '28%' }}></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-gray-800/50 border-border\">\n                      <CardContent className=\"p-4 text-center\">\n                        <h4 className=\"font-medium text-white\">Storage Used</h4>\n                        <p className=\"text-2xl font-bold text-accent mt-2\">1.2 GB</p>\n                        <p className=\"text-sm text-gray-400\">of 5 GB limit</p>\n                        <div className=\"w-full bg-gray-700 rounded-full h-2 mt-2\">\n                          <div className=\"bg-accent h-2 rounded-full\" style={{ width: '24%' }}></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-gray-800/50 border-border\">\n                      <CardContent className=\"p-4 text-center\">\n                        <h4 className=\"font-medium text-white\">Active Chatbots</h4>\n                        <p className=\"text-2xl font-bold text-success mt-2\">3</p>\n                        <p className=\"text-sm text-gray-400\">of 5 limit</p>\n                        <div className=\"w-full bg-gray-700 rounded-full h-2 mt-2\">\n                          <div className=\"bg-success h-2 rounded-full\" style={{ width: '60%' }}></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-white mb-4\">Payment Method</h4>\n                    <div className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-blue-500 rounded flex items-center justify-center\">\n                          <CreditCard className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-white\">•••• •••• •••• 4242</p>\n                          <p className=\"text-sm text-gray-400\">Expires 12/25</p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Update\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-white mb-4\">Billing History</h4>\n                    <div className=\"space-y-2\">\n                      {[\n                        { date: '2024-01-01', amount: '$99.00', status: 'Paid' },\n                        { date: '2023-12-01', amount: '$99.00', status: 'Paid' },\n                        { date: '2023-11-01', amount: '$99.00', status: 'Paid' },\n                      ].map((invoice, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n                          <div>\n                            <p className=\"text-white\">{invoice.date}</p>\n                            <p className=\"text-sm text-gray-400\">Professional Plan</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium text-white\">{invoice.amount}</p>\n                            <Badge className=\"bg-success/10 text-success text-xs\">\n                              {invoice.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    <Button className=\"bg-primary hover:bg-primary/90\">\n                      Upgrade Plan\n                    </Button>\n                    <Button variant=\"outline\">\n                      Download Invoices\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":30739},"client/src/pages/superadmin/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { CreditCard, DollarSign, TrendingUp, Users, Building2, Calendar, Search, Filter, MoreHorizontal } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function SuperAdminBilling() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [planFilter, setPlanFilter] = useState(\"all\");\n\n  const { data: tenants, isLoading: tenantsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/tenants\"],\n    retry: false,\n  });\n\n  const { data: platformStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/stats\"],\n    retry: false,\n  });\n\n  const updateTenantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/superadmin/tenants/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tenant updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update tenant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-success/10 text-success';\n      case 'trialing':\n        return 'bg-primary/10 text-primary';\n      case 'past_due':\n        return 'bg-warning/10 text-warning';\n      case 'cancelled':\n        return 'bg-error/10 text-error';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const getPlanColor = (plan: string) => {\n    switch (plan?.toLowerCase()) {\n      case 'enterprise':\n        return 'bg-secondary/10 text-secondary';\n      case 'professional':\n        return 'bg-accent/10 text-accent';\n      case 'starter':\n        return 'bg-primary/10 text-primary';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const getPlanPrice = (plan: string) => {\n    switch (plan?.toLowerCase()) {\n      case 'enterprise':\n        return 199;\n      case 'professional':\n        return 99;\n      case 'starter':\n        return 29;\n      default:\n        return 0;\n    }\n  };\n\n  const filteredTenants = tenants?.filter((tenant: any) => {\n    const matchesSearch = tenant.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         tenant.domain?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || tenant.subscriptionStatus === statusFilter;\n    const matchesPlan = planFilter === 'all' || tenant.subscriptionPlan === planFilter;\n    return matchesSearch && matchesStatus && matchesPlan;\n  }) || [];\n\n  const totalMRR = filteredTenants\n    .filter((tenant: any) => tenant.subscriptionStatus === 'active')\n    .reduce((sum: number, tenant: any) => sum + getPlanPrice(tenant.subscriptionPlan), 0);\n\n  const handleUpdatePlan = (tenantId: string, plan: string) => {\n    updateTenantMutation.mutate({\n      id: tenantId,\n      data: { subscriptionPlan: plan }\n    });\n  };\n\n  const handleUpdateStatus = (tenantId: string, status: string) => {\n    updateTenantMutation.mutate({\n      id: tenantId,\n      data: { subscriptionStatus: status }\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Billing & Subscriptions\" description=\"Manage platform billing, subscriptions, and revenue\">\n      <div className=\"space-y-6\">\n        {/* Revenue Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <DollarSign className=\"text-success w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Monthly Revenue</p>\n                  <p className=\"text-2xl font-bold text-white\">${totalMRR.toLocaleString()}</p>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-success flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  12.5%\n                </span>\n                <span className=\"text-gray-400 ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Users className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Active Subscribers</p>\n                  <p className=\"text-2xl font-bold text-white\">\n                    {tenants?.filter((t: any) => t.subscriptionStatus === 'active').length || 0}\n                  </p>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-success flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  8.2%\n                </span>\n                <span className=\"text-gray-400 ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <CreditCard className=\"text-accent w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Trial Conversions</p>\n                  <p className=\"text-2xl font-bold text-white\">24.5%</p>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-success flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                  4.1%\n                </span>\n                <span className=\"text-gray-400 ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border hover-glow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-warning/10 rounded-lg\">\n                  <Calendar className=\"text-warning w-6 h-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-400\">Churn Rate</p>\n                  <p className=\"text-2xl font-bold text-white\">2.1%</p>\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-error flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-1 rotate-180\" />\n                  0.5%\n                </span>\n                <span className=\"text-gray-400 ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Search */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Subscription Management</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Manage tenant subscriptions and billing\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search tenants...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-surface border-border\">\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"trialing\">Trialing</SelectItem>\n                  <SelectItem value=\"past_due\">Past Due</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={planFilter} onValueChange={setPlanFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by plan\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-surface border-border\">\n                  <SelectItem value=\"all\">All Plans</SelectItem>\n                  <SelectItem value=\"starter\">Starter</SelectItem>\n                  <SelectItem value=\"professional\">Professional</SelectItem>\n                  <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Subscriptions Table */}\n            <div className=\"border border-border rounded-lg overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-800/50\">\n                    <tr>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Tenant\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Plan\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Status\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        MRR\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Next Billing\n                      </th>\n                      <th className=\"text-left text-xs font-medium text-gray-400 uppercase tracking-wider p-4\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {tenantsLoading ? (\n                      [...Array(5)].map((_, i) => (\n                        <tr key={i}>\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Skeleton className=\"h-8 w-8 rounded-full bg-gray-700\" />\n                              <div className=\"space-y-2\">\n                                <Skeleton className=\"h-4 w-32 bg-gray-700\" />\n                                <Skeleton className=\"h-3 w-24 bg-gray-700\" />\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\"><Skeleton className=\"h-6 w-20 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-6 w-16 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-4 w-12 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-4 w-20 bg-gray-700\" /></td>\n                          <td className=\"p-4\"><Skeleton className=\"h-8 w-8 bg-gray-700\" /></td>\n                        </tr>\n                      ))\n                    ) : filteredTenants.length === 0 ? (\n                      <tr>\n                        <td colSpan={6} className=\"text-center py-8\">\n                          <Building2 className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                          <p className=\"text-gray-400\">No tenants found</p>\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredTenants.map((tenant: any) => (\n                        <tr key={tenant.id} className=\"hover:bg-gray-800/25\">\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                                <Building2 className=\"w-4 h-4 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-white\">{tenant.name}</p>\n                                <p className=\"text-xs text-gray-400\">{tenant.domain || 'No domain'}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={getPlanColor(tenant.subscriptionPlan)}>\n                              {tenant.subscriptionPlan || 'No plan'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={getStatusColor(tenant.subscriptionStatus)}>\n                              {tenant.subscriptionStatus}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"text-sm text-white font-medium\">\n                              ${getPlanPrice(tenant.subscriptionPlan)}\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <span className=\"text-sm text-gray-400\">\n                              {tenant.subscriptionEndsAt \n                                ? new Date(tenant.subscriptionEndsAt).toLocaleDateString()\n                                : 'N/A'\n                              }\n                            </span>\n                          </td>\n                          <td className=\"p-4\">\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdatePlan(tenant.id, 'starter')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Change to Starter\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdatePlan(tenant.id, 'professional')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Change to Professional\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdatePlan(tenant.id, 'enterprise')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  Change to Enterprise\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleUpdateStatus(tenant.id, tenant.subscriptionStatus === 'active' ? 'cancelled' : 'active')}\n                                  className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                                >\n                                  {tenant.subscriptionStatus === 'active' ? 'Cancel' : 'Activate'} Subscription\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":18235},"client/src/pages/superadmin/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport StatsCard from \"@/components/dashboard/StatsCard\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Users, MessageSquare, TrendingUp, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function SuperAdminDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect if not superadmin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'superadmin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need superadmin access to view this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: platformStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/stats\"],\n    retry: false,\n  });\n\n  const { data: tenants, isLoading: tenantsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/tenants\"],\n    retry: false,\n  });\n\n  if (isLoading || !isAuthenticated || user?.role !== 'superadmin') {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-400';\n      case 'trialing':\n        return 'bg-blue-500/10 text-blue-400';\n      case 'past_due':\n        return 'bg-yellow-500/10 text-yellow-400';\n      case 'cancelled':\n        return 'bg-red-500/10 text-red-400';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Platform Overview\" description=\"Monitor platform-wide metrics and tenant activity\">\n      <div className=\"space-y-8\">\n        {/* Platform Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Tenants\"\n            value={platformStats?.totalTenants || 0}\n            icon={Building2}\n            change={12.5}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"Active Tenants\"\n            value={platformStats?.activeTenants || 0}\n            icon={CheckCircle}\n            change={8.2}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"Total Conversations\"\n            value={platformStats?.totalConversations || 0}\n            icon={MessageSquare}\n            change={15.3}\n            loading={statsLoading}\n          />\n          <StatsCard\n            title=\"Total Leads\"\n            value={platformStats?.totalLeads || 0}\n            icon={Users}\n            change={23.1}\n            loading={statsLoading}\n          />\n        </div>\n\n        {/* Platform Health */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card className=\"bg-surface border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-green-400\" />\n                Platform Health\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                System status and performance metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-300\">System Status</span>\n                  <Badge className=\"bg-green-500/10 text-green-400\">Operational</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-300\">Database</span>\n                  <Badge className=\"bg-green-500/10 text-green-400\">Healthy</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-300\">API Response Time</span>\n                  <span className=\"text-white\">45ms</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-300\">Uptime</span>\n                  <span className=\"text-white\">99.9%</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 mr-2 text-yellow-400\" />\n                Recent Alerts\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                System alerts and notifications\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-yellow-400 rounded-full mt-2\"></div>\n                  <div>\n                    <p className=\"text-sm text-white\">High API usage detected</p>\n                    <p className=\"text-xs text-gray-400\">2 minutes ago</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full mt-2\"></div>\n                  <div>\n                    <p className=\"text-sm text-white\">Database backup completed</p>\n                    <p className=\"text-xs text-gray-400\">1 hour ago</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-blue-400 rounded-full mt-2\"></div>\n                  <div>\n                    <p className=\"text-sm text-white\">New tenant onboarded</p>\n                    <p className=\"text-xs text-gray-400\">3 hours ago</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-surface border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Quick Actions</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Common administrative tasks\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Link href=\"/tenants\">\n                  <Button className=\"w-full bg-primary/10 hover:bg-primary/20 text-primary justify-start\">\n                    <Building2 className=\"w-4 h-4 mr-2\" />\n                    Manage Tenants\n                  </Button>\n                </Link>\n                <Link href=\"/billing\">\n                  <Button className=\"w-full bg-secondary/10 hover:bg-secondary/20 text-secondary justify-start\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    View Billing\n                  </Button>\n                </Link>\n                <Button className=\"w-full bg-accent/10 hover:bg-accent/20 text-accent justify-start\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                  System Logs\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Tenants */}\n        <Card className=\"bg-surface border-border\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-white\">Recent Tenants</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Latest tenant registrations and activity\n                </CardDescription>\n              </div>\n              <Link href=\"/tenants\">\n                <Button variant=\"link\" className=\"text-primary hover:text-primary/80 p-0\">\n                  View all tenants\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {tenantsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-gray-700 rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-gray-700 rounded w-1/4\"></div>\n                        <div className=\"h-3 bg-gray-700 rounded w-1/3\"></div>\n                      </div>\n                      <div className=\"h-6 bg-gray-700 rounded w-20\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : tenants?.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Building2 className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                <p className=\"text-gray-400\">No tenants found</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {tenants?.slice(0, 10).map((tenant: any) => (\n                  <div key={tenant.id} className=\"flex items-center justify-between p-4 bg-gray-800/50 rounded-lg border border-border\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <Building2 className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-white\">{tenant.name}</h4>\n                        <p className=\"text-sm text-gray-400\">{tenant.domain || 'No domain'}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <Badge className={getStatusColor(tenant.subscriptionStatus)}>\n                        {tenant.subscriptionStatus}\n                      </Badge>\n                      <span className=\"text-sm text-gray-400\">\n                        {tenant.subscriptionPlan || 'No plan'}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":11004},"client/src/pages/superadmin/tenants.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Building2, Plus, Edit, Eye, MoreHorizontal, Users, MessageSquare, Calendar } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function SuperAdminTenants() {\n  const { toast } = useToast();\n  const [selectedTenant, setSelectedTenant] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newTenantData, setNewTenantData] = useState({\n    name: '',\n    domain: '',\n    website: '',\n    subscriptionPlan: 'starter',\n    adminEmail: '',\n    adminFirstName: '',\n    adminLastName: '',\n    adminPassword: '',\n    adminConfirmPassword: ''\n  });\n\n  const { data: tenants, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/tenants\"],\n    retry: false,\n  });\n\n  const createTenantMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/superadmin/tenants\", \"POST\", data);\n    },\n    onSuccess: (response: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: response?.message || \"Tenant created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n      setNewTenantData({ \n        name: '', \n        domain: '', \n        website: '', \n        subscriptionPlan: 'starter',\n        adminEmail: '',\n        adminFirstName: '',\n        adminLastName: '',\n        adminPassword: '',\n        adminConfirmPassword: ''\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Tenant creation error:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create tenant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTenantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(`/api/superadmin/tenants/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/tenants\"] });\n      toast({\n        title: \"Success\",\n        description: \"Tenant updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update tenant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-400';\n      case 'trialing':\n        return 'bg-blue-500/10 text-blue-400';\n      case 'past_due':\n        return 'bg-yellow-500/10 text-yellow-400';\n      case 'cancelled':\n        return 'bg-red-500/10 text-red-400';\n      default:\n        return 'bg-gray-500/10 text-gray-400';\n    }\n  };\n\n  const handleCreateTenant = () => {\n    if (!newTenantData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Tenant name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!newTenantData.adminEmail.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Admin email is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!newTenantData.adminFirstName.trim() || !newTenantData.adminLastName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Admin first and last name are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!newTenantData.adminPassword.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Admin password is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newTenantData.adminPassword.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newTenantData.adminPassword !== newTenantData.adminConfirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTenantMutation.mutate(newTenantData);\n  };\n\n  const handleUpdateStatus = (tenantId: string, status: string) => {\n    updateTenantMutation.mutate({\n      id: tenantId,\n      data: { subscriptionStatus: status }\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Tenant Management\" description=\"Manage all platform tenants and their subscriptions\">\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <Skeleton className=\"h-8 w-48 bg-gray-700\" />\n            <Skeleton className=\"h-10 w-32 bg-gray-700\" />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48 bg-gray-700 rounded-lg\" />\n            ))}\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Tenant Management\" description=\"Manage all platform tenants and their subscriptions\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-white\">\n              All Tenants ({Array.isArray(tenants) ? tenants.length : 0})\n            </h2>\n            <p className=\"text-sm text-gray-400\">\n              Manage tenant accounts, subscriptions, and access\n            </p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary/90\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Tenant\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-surface border-border\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Create New Tenant</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Add a new tenant to the platform\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"text-white\">Business Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={newTenantData.name}\n                    onChange={(e) => setNewTenantData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter business name\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"domain\" className=\"text-white\">Domain</Label>\n                  <Input\n                    id=\"domain\"\n                    value={newTenantData.domain}\n                    onChange={(e) => setNewTenantData(prev => ({ ...prev, domain: e.target.value }))}\n                    placeholder=\"example.com\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"website\" className=\"text-white\">Website URL</Label>\n                  <Input\n                    id=\"website\"\n                    value={newTenantData.website}\n                    onChange={(e) => setNewTenantData(prev => ({ ...prev, website: e.target.value }))}\n                    placeholder=\"https://example.com\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"plan\" className=\"text-white\">Subscription Plan</Label>\n                  <Select \n                    value={newTenantData.subscriptionPlan} \n                    onValueChange={(value) => setNewTenantData(prev => ({ ...prev, subscriptionPlan: value }))}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-surface border-border\">\n                      <SelectItem value=\"starter\">Starter</SelectItem>\n                      <SelectItem value=\"professional\">Professional</SelectItem>\n                      <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {/* Admin User Section */}\n                <div className=\"border-t border-border pt-4\">\n                  <h4 className=\"text-sm font-medium text-white mb-3\">Tenant Admin User</h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <Label htmlFor=\"adminEmail\" className=\"text-white\">Admin Email</Label>\n                      <Input\n                        id=\"adminEmail\"\n                        type=\"email\"\n                        value={newTenantData.adminEmail}\n                        onChange={(e) => setNewTenantData(prev => ({ ...prev, adminEmail: e.target.value }))}\n                        placeholder=\"admin@example.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div>\n                        <Label htmlFor=\"adminFirstName\" className=\"text-white\">First Name</Label>\n                        <Input\n                          id=\"adminFirstName\"\n                          value={newTenantData.adminFirstName}\n                          onChange={(e) => setNewTenantData(prev => ({ ...prev, adminFirstName: e.target.value }))}\n                          placeholder=\"John\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"adminLastName\" className=\"text-white\">Last Name</Label>\n                        <Input\n                          id=\"adminLastName\"\n                          value={newTenantData.adminLastName}\n                          onChange={(e) => setNewTenantData(prev => ({ ...prev, adminLastName: e.target.value }))}\n                          placeholder=\"Doe\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <div>\n                        <Label htmlFor=\"adminPassword\" className=\"text-white\">Password</Label>\n                        <Input\n                          id=\"adminPassword\"\n                          type=\"password\"\n                          value={newTenantData.adminPassword}\n                          onChange={(e) => setNewTenantData(prev => ({ ...prev, adminPassword: e.target.value }))}\n                          placeholder=\"Min 8 characters\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"adminConfirmPassword\" className=\"text-white\">Confirm Password</Label>\n                        <Input\n                          id=\"adminConfirmPassword\"\n                          type=\"password\"\n                          value={newTenantData.adminConfirmPassword}\n                          onChange={(e) => setNewTenantData(prev => ({ ...prev, adminConfirmPassword: e.target.value }))}\n                          placeholder=\"Confirm password\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button \n                    onClick={handleCreateTenant}\n                    disabled={createTenantMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Create Tenant\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Tenants Grid */}\n        {(!Array.isArray(tenants) || tenants.length === 0) ? (\n          <Card className=\"bg-surface border-border\">\n            <CardContent className=\"text-center py-12\">\n              <Building2 className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-white mb-2\">No Tenants Found</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Create your first tenant to get started\n              </p>\n              <Button \n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                Create First Tenant\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.isArray(tenants) && tenants.map((tenant: any) => (\n              <Card key={tenant.id} className=\"bg-surface border-border hover:border-primary/50 transition-colors\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Building2 className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-white text-lg\">{tenant.name}</CardTitle>\n                        <CardDescription className=\"text-gray-400\">\n                          {tenant.domain || 'No domain'}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent className=\"bg-surface border-border\" align=\"end\">\n                        <DropdownMenuItem \n                          onClick={() => setSelectedTenant(tenant)}\n                          className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                        >\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleUpdateStatus(tenant.id, tenant.subscriptionStatus === 'active' ? 'inactive' : 'active')}\n                          className=\"text-gray-300 hover:text-white hover:bg-gray-700\"\n                        >\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          {tenant.subscriptionStatus === 'active' ? 'Deactivate' : 'Activate'}\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Status</span>\n                      <Badge className={getStatusColor(tenant.subscriptionStatus)}>\n                        {tenant.subscriptionStatus}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Plan</span>\n                      <span className=\"text-sm text-white font-medium\">\n                        {tenant.subscriptionPlan || 'No plan'}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Created</span>\n                      <span className=\"text-sm text-white\">\n                        {new Date(tenant.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                    {tenant.website && (\n                      <div className=\"pt-2\">\n                        <a \n                          href={tenant.website} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-sm text-primary hover:text-primary/80 underline\"\n                        >\n                          Visit Website\n                        </a>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Tenant Details Modal */}\n        {selectedTenant && (\n          <Dialog open={!!selectedTenant} onOpenChange={() => setSelectedTenant(null)}>\n            <DialogContent className=\"bg-surface border-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">{selectedTenant.name}</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Tenant details and statistics\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-white\">Business Name</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedTenant.name}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Domain</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedTenant.domain || 'Not set'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Status</Label>\n                    <Badge className={`mt-1 ${getStatusColor(selectedTenant.subscriptionStatus)}`}>\n                      {selectedTenant.subscriptionStatus}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label className=\"text-white\">Plan</Label>\n                    <p className=\"text-gray-300 mt-1\">{selectedTenant.subscriptionPlan || 'No plan'}</p>\n                  </div>\n                </div>\n\n                {selectedTenant.website && (\n                  <div>\n                    <Label className=\"text-white\">Website</Label>\n                    <a \n                      href={selectedTenant.website} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-primary hover:text-primary/80 underline block mt-1\"\n                    >\n                      {selectedTenant.website}\n                    </a>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-3 gap-4 pt-4\">\n                  <div className=\"bg-gray-800/50 p-4 rounded-lg text-center\">\n                    <Users className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-white\">0</p>\n                    <p className=\"text-sm text-gray-400\">Users</p>\n                  </div>\n                  <div className=\"bg-gray-800/50 p-4 rounded-lg text-center\">\n                    <MessageSquare className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-white\">0</p>\n                    <p className=\"text-sm text-gray-400\">Conversations</p>\n                  </div>\n                  <div className=\"bg-gray-800/50 p-4 rounded-lg text-center\">\n                    <Calendar className=\"w-8 h-8 text-purple-400 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-white\">0</p>\n                    <p className=\"text-sm text-gray-400\">Appointments</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2 pt-4\">\n                  <Button\n                    onClick={() => handleUpdateStatus(selectedTenant.id, selectedTenant.subscriptionStatus === 'active' ? 'inactive' : 'active')}\n                    variant={selectedTenant.subscriptionStatus === 'active' ? 'destructive' : 'default'}\n                    className={selectedTenant.subscriptionStatus === 'active' ? '' : 'bg-green-600 hover:bg-green-700'}\n                  >\n                    {selectedTenant.subscriptionStatus === 'active' ? 'Deactivate' : 'Activate'} Tenant\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedTenant(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":22222},"client/src/pages/superadmin/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { \n  Settings as SettingsIcon, \n  Globe, \n  Shield, \n  Database, \n  Mail, \n  Key,\n  Save,\n  RefreshCw\n} from \"lucide-react\";\n\nexport default function SuperAdminSettings() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"general\");\n\n  // Mock platform settings - in real app this would come from API\n  const { data: platformSettings, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/platform-settings\"],\n    retry: false,\n  });\n\n  // Mock data for demonstration\n  const settings = platformSettings || {\n    platformName: \"ChatBot Pro\",\n    platformUrl: \"https://your-domain.com\",\n    registrationEnabled: true,\n    emailVerificationRequired: false,\n    maxTenantsPerUser: 5,\n    defaultTrialDays: 14,\n    supportEmail: \"support@chatbotpro.com\",\n    maintenanceMode: false,\n    analyticsEnabled: true,\n    backupFrequency: \"daily\"\n  };\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"/api/superadmin/platform-settings\", \"PUT\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Platform settings have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/platform-settings\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update platform settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = (formData: FormData) => {\n    const data = Object.fromEntries(formData.entries());\n    updateSettingsMutation.mutate(data);\n  };\n\n  const tabs = [\n    { id: \"general\", label: \"General\", icon: SettingsIcon },\n    { id: \"security\", label: \"Security\", icon: Shield },\n    { id: \"email\", label: \"Email\", icon: Mail },\n    { id: \"system\", label: \"System\", icon: Database }\n  ];\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Platform Settings</h1>\n            <p className=\"text-muted-foreground\">Configure your multi-tenant chatbot platform</p>\n          </div>\n          <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n            <Globe className=\"h-4 w-4\" />\n            Platform Admin\n          </Badge>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 border-b\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-t-lg transition-colors ${\n                activeTab === tab.id\n                  ? \"bg-background border-b-2 border-primary text-primary\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        {/* General Settings */}\n        {activeTab === \"general\" && (\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Platform Information</CardTitle>\n                <CardDescription>Basic platform configuration and branding</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <form action={handleSaveSettings}>\n                  <div className=\"grid gap-4\">\n                    <div className=\"grid gap-2\">\n                      <Label htmlFor=\"platformName\">Platform Name</Label>\n                      <Input\n                        id=\"platformName\"\n                        name=\"platformName\"\n                        defaultValue={settings.platformName}\n                        placeholder=\"ChatBot Pro\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid gap-2\">\n                      <Label htmlFor=\"platformUrl\">Platform URL</Label>\n                      <Input\n                        id=\"platformUrl\"\n                        name=\"platformUrl\"\n                        type=\"url\"\n                        defaultValue={settings.platformUrl}\n                        placeholder=\"https://your-domain.com\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid gap-2\">\n                      <Label htmlFor=\"supportEmail\">Support Email</Label>\n                      <Input\n                        id=\"supportEmail\"\n                        name=\"supportEmail\"\n                        type=\"email\"\n                        defaultValue={settings.supportEmail}\n                        placeholder=\"support@chatbotpro.com\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"mt-4\" disabled={updateSettingsMutation.isPending}>\n                    {updateSettingsMutation.isPending ? (\n                      <>\n                        <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Registration Settings</CardTitle>\n                <CardDescription>Control user registration and tenant creation</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Allow New Registrations</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable or disable new user registrations\n                    </p>\n                  </div>\n                  <Switch defaultChecked={settings.registrationEnabled} />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Email Verification Required</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Require email verification for new users\n                    </p>\n                  </div>\n                  <Switch defaultChecked={settings.emailVerificationRequired} />\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  <Label>Max Tenants per User</Label>\n                  <Input\n                    type=\"number\"\n                    defaultValue={settings.maxTenantsPerUser}\n                    min=\"1\"\n                    max=\"50\"\n                    className=\"w-32\"\n                  />\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  <Label>Default Trial Days</Label>\n                  <Input\n                    type=\"number\"\n                    defaultValue={settings.defaultTrialDays}\n                    min=\"0\"\n                    max=\"365\"\n                    className=\"w-32\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Security Settings */}\n        {activeTab === \"security\" && (\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Security Configuration</CardTitle>\n                <CardDescription>Platform security and access control settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Maintenance Mode</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable to restrict access during maintenance\n                    </p>\n                  </div>\n                  <Switch defaultChecked={settings.maintenanceMode} />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Analytics Tracking</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable platform usage analytics\n                    </p>\n                  </div>\n                  <Switch defaultChecked={settings.analyticsEnabled} />\n                </div>\n                \n                <Alert>\n                  <Key className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    API keys and sensitive security settings are managed through environment variables.\n                    Contact your system administrator for changes.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Email Settings */}\n        {activeTab === \"email\" && (\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Email Configuration</CardTitle>\n                <CardDescription>Configure email notifications and templates</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Alert>\n                  <Mail className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Email configuration is managed through environment variables and SMTP settings.\n                    This feature will be available in a future update.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* System Settings */}\n        {activeTab === \"system\" && (\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>System Configuration</CardTitle>\n                <CardDescription>Database and system-level settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-2\">\n                  <Label>Backup Frequency</Label>\n                  <select \n                    defaultValue={settings.backupFrequency}\n                    className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                  >\n                    <option value=\"hourly\">Hourly</option>\n                    <option value=\"daily\">Daily</option>\n                    <option value=\"weekly\">Weekly</option>\n                  </select>\n                </div>\n                \n                <Alert>\n                  <Database className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Database configuration and backup settings are managed at the infrastructure level.\n                    Contact your system administrator for advanced database settings.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":12374},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport createMemoryStore from \"memorystore\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const MemoryStore = createMemoryStore(session);\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-secret-key-change-this\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"username\" },\n      async (username, password, done) => {\n        try {\n          const user = await storage.getUserByUsername(username);\n          if (!user || !user.password) {\n            return done(null, false);\n          }\n          \n          const isValid = await comparePasswords(password, user.password);\n          if (!isValid) {\n            return done(null, false);\n          }\n          \n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, (user as SelectUser).id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Register route\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role: 'business_member', // Default role for new signups\n      });\n\n      // Log them in\n      req.login(user, async (err) => {\n        if (err) return next(err);\n        \n        // Automatically create a default tenant for new users\n        try {\n          const tenant = await storage.createTenant({\n            name: `${user.firstName || user.username}'s Business`,\n            domain: null,\n            website: null,\n          });\n          \n          // Update user to business_admin with tenant\n          await storage.upsertUser({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            password: user.password,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: 'business_admin',\n            tenantId: tenant.id,\n          });\n          \n          res.status(201).json({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: 'business_admin',\n            tenantId: tenant.id,\n          });\n        } catch (tenantError) {\n          console.error(\"Error creating automatic tenant:\", tenantError);\n          // Still return success for user creation, tenant can be created later\n          res.status(201).json({\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            tenantId: user.tenantId,\n          });\n        }\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\", error: error.message });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          tenantId: user.tenantId,\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    const user = req.user as SelectUser;\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      tenantId: user.tenantId,\n    });\n  });\n}\n\nexport const isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":6411}}}